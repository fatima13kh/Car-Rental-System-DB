--!IMPORTANT NOTE:
--ORDER OF EXECUTION MUST BE: 
--1-DDL schema
--2- indexes
--3- sequences
--4- triggers
--5- functions
--6- DML script
--7- views
--8- procedures
--9- package
--10- Anonymous Blocks


--!DDL script for a database schema
/* ---------------------------------------------------- */
/*  Generated by Enterprise Architect Version 12.1 		*/
/*  Created On : 16-May-2024 4:51:38 PM 				*/
/*  DBMS       : Oracle 						*/
/* ---------------------------------------------------- */

/* Drop Tables */

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "ACCIDENT_REPORT" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "ADDRESS" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "CAR" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "CAR_CATEGORY" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "CAR_INSPECTION" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "CAR_INSURANCE" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "CAR_RENTAL" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "CAR_RENTAL_STATUS" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "CARD_DETAIL" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "CUSTOMER" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "DISCOUNT" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "EMPLOYEE" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "ENGINE" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "EXTRA_EQUIPMENT" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "EXTRA_RENTAL" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "INSURANCE" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "INSURANCE_COMPANY" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "LICENSE" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "LOCATION" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "MAINTENANCE" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "MAINTENANCE_TYPE" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "MANUFACTURER" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "MODEL" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "MODEL_ENGINE" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "MODEL_OPTION" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "OPTION_DESCRIPTION" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "PAYMENT" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "PENALTY" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "RENTAL_REVIEW" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "RENTAL_STATUS" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

/* Create Tables */

CREATE TABLE  "ACCIDENT_REPORT"
(
	"ACCIDENT_REPORT_ID" NUMBER(8) NOT NULL,
	"ACCIDENT_DATE" DATE NOT NULL,
	"ACCIDENT_DESCRIPTION" VARCHAR2(200) NOT NULL,
	"CAR_REGISTRATION_PLATE_NUMBER" NUMBER(6) NULL
)
;

CREATE TABLE  "ADDRESS"
(
	"ADDRESS_ID" NUMBER(6) NOT NULL,
	"CITY" VARCHAR2(20) NOT NULL,
	"ROAD" NUMBER(4) NOT NULL,
	"BLOCK" NUMBER(4) NOT NULL,
	"ADDRESS_TYPE" VARCHAR2(150) NULL,
	"BUILDING_NUMBER" NUMBER(5) NOT NULL,
	"NOTES" VARCHAR2(250) NULL,
	"CUSTOMER_ID" NUMBER(9) NULL
)
;

CREATE TABLE  "CAR"
(
	"CAR_REGISTRATION_PLATE_NUMBER" NUMBER(6) NOT NULL,
	"CAR_REGISTRATION_DUE_DATE" DATE NOT NULL,
	"YEAR_MANUFACTURED" NUMBER(4) NOT NULL,
	"CAR_COLOUR" VARCHAR2(80) NOT NULL,
	"CAR_CURRENT_MILEAGE" NUMBER(6,2) DEFAULT 0 NOT NULL,
	"CAR_DAILY_HIRE_RATE" NUMBER(4,2) NULL,
	"CAR_DAILY_LATE_RETURN_PANELTY" NUMBER(4,2) NULL,
	"CATEGORY_ID" VARCHAR2(50) NULL,
	"MODEL_ID" NUMBER(6) NULL,
	"RENTAL_STATUS_ID" NUMBER(8) NULL,
	"LOCATION_ID" NUMBER(3) NULL
)
;

CREATE TABLE  "CAR_CATEGORY"
(
	"CATEGORY_ID" VARCHAR2(50) NOT NULL,
	"CATEGORY_NAME" VARCHAR2(50) NOT NULL,
	"CATEGORY_DESCRIPTION" VARCHAR2(100) NULL
)
;

CREATE TABLE  "CAR_INSPECTION"
(
	"INSPECTION_ID" NUMBER(8) NOT NULL,
	"ISPECTION_DATE" DATE NOT NULL,
	"INSPECTION_RESULT" VARCHAR2(200) NOT NULL,
	"INSPECTION_NOTES" VARCHAR2(300) NULL,
	"CAR_REGISTRATION_PLATE_NUMBER" NUMBER(6) NULL
)
;

CREATE TABLE  "CAR_INSURANCE"
(
	"INSURANCE_START_DATE" DATE NULL,
	"INSURANCE_END_DATE" DATE NULL,
	"CAR_REGISTRATION_PLATE_NUMBER" NUMBER(6) NOT NULL,
	"INSURANCE_ID" NUMBER(2) NOT NULL
)
;

CREATE TABLE  "CAR_RENTAL"
(
	"CAR_RENTAL_ID" NUMBER(9) NOT NULL,
	"CAR_RENTAL_START_DATE" DATE NOT NULL,
	"CAR_RENTAL_END_DATE" DATE NOT NULL,
	"CAR_RENTAL_RETURN_DATE" DATE NULL,
	"CAR_REGISTRATION_PLATE_NUMBER" NUMBER(6) NULL,
	"CUSTOMER_ID" NUMBER(9) NULL,
	"DISCOUNT_CODE" VARCHAR2(10) NULL,
	"EMPLOYEE_ID" NUMBER(8) NULL,
	"CAR_RENTAL_STATUS_ID" NUMBER(4) NULL
)
;

CREATE TABLE  "CAR_RENTAL_STATUS"
(
	"CAR_RENTAL_STATUS_ID" NUMBER(4) NOT NULL,
	"CAR_RENTAL_STATUS_DESCRIPTION" VARCHAR2(200) NULL
)
;

CREATE TABLE  "CARD_DETAIL"
(
	"CARD_NUMBER" NUMBER(16) NOT NULL,
	"CARD_OWNER" VARCHAR2(150) NOT NULL,
	"CARD_EXPIRATION_MONTH" NUMBER(2) NOT NULL,
	"CARD_EXPIRATION_YEAR" NUMBER(2) NOT NULL,
	"CARD_CVV" NUMBER(3) NOT NULL,
	"CUSTOMER_ID" NUMBER(9) NULL
)
;

CREATE TABLE  "CUSTOMER"
(
	"CUSTOMER_ID" NUMBER(9) NOT NULL,
	"CUSTOMER_FIRST_NAME" VARCHAR2(20) NOT NULL,
	"CUSTOMER_LAST_NAME" VARCHAR2(20) NOT NULL,
	"CUSTOMER_PHONE_NUMBER" VARCHAR2(15) NOT NULL,
	"CUSTOMER_EMAIL_ADDRESS" VARCHAR2(200) NOT NULL,
	"CUSTOMER_NATIONALITY" VARCHAR2(50) NOT NULL,
	"CUSTOMER_CPR" NUMBER(20) NOT NULL,
	"LICENSE_NUMBER" NUMBER(9) NULL,
	"LOYALITY_POINTS" NUMBER(6) NULL
)
;

CREATE TABLE  "DISCOUNT"
(
	"DISCOUNT_CODE" VARCHAR2(10) NOT NULL,
	"DISCOUNT_NAME" VARCHAR2(100) NOT NULL,
	"DISCOUNT_AMOUNT" NUMBER(4,2) NOT NULL,
	"DISCOUNT_START_DATE" DATE NOT NULL,
	"DISCOUNT_EXPIRATION_DATE" DATE NOT NULL
)
;

CREATE TABLE  "EMPLOYEE"
(
	"EMPLOYEE_ID" NUMBER(8) NOT NULL,
	"EMPLOYEE_FIRST_NAME" VARCHAR2(50) NOT NULL,
	"EMPLOYEE_LAST_NAME" VARCHAR2(50) NOT NULL,
	"EMPLOYEE_EMAIL" VARCHAR2(120) NOT NULL,
	"EMPLOYEE_PHONE_NUMBER" VARCHAR2(15) NOT NULL,
	"EMPLOYEE_OFFICE_LOCATION" VARCHAR2(100) NULL,
	"EMPLOYEE_OFFICE_HOURS" VARCHAR2(120) NULL,
	"EMPLOYEE_SALARY" NUMBER(6) NOT NULL,
	"EMPLOYEE_COMMISION_PCT" NUMBER(3) NULL,
	"EMPLOYEE_DATE_HIRED" DATE NOT NULL,
	"MANAGER_ID" NUMBER(8) NULL,
	"LOCATION_ID" NUMBER(3) NULL
)
;

CREATE TABLE  "ENGINE"
(
	"ENGINE_ID" NUMBER(8) NOT NULL,
	"ENGINE_SIZE" NUMBER(2) NOT NULL
)
;

CREATE TABLE  "EXTRA_EQUIPMENT"
(
	"EQUIPMENT_ID" NUMBER(8) NOT NULL,
	"EQUPMENT_NAME" VARCHAR2(50) NOT NULL,
	"EQUIPMENT_DESCRIPTION" VARCHAR2(200) NOT NULL,
	"EQUIPMENT_DAILY_RENTAL_PRICE" NUMBER(4,2) NOT NULL,
	"EQUIPMENT_QUANTITY_ON_STOCK" NUMBER(4) NOT NULL
)
;

CREATE TABLE  "EXTRA_RENTAL"
(
	"QUANTITY" NUMBER(2) NOT NULL,
	"CAR_RENTAL_ID" NUMBER(9) NOT NULL,
	"EQUIPMENT_ID" NUMBER(8) NOT NULL
)
;

CREATE TABLE  "INSURANCE"
(
	"INSURANCE_TYPE" VARCHAR2(90) NOT NULL,
	"INSURANCE_COST" NUMBER(5,2) NOT NULL,
	"INSURANCE_DESCRIPTION" VARCHAR2(150) NULL,
	"INSURANCE_ID" NUMBER(2) NOT NULL,
	"INSURANCE_COMPANY_ID" NUMBER(8,2) NULL
)
;

CREATE TABLE  "INSURANCE_COMPANY"
(
	"INSURANCE_COMPANY_ID" NUMBER(8,2) NOT NULL,
	"INSURANCE_COMPANY_NAME" VARCHAR2(50) NOT NULL,
	"INSURANCE_COMPANY_PHONE_NUMBER" VARCHAR2(15) NOT NULL,
	"INSURANCE_COMPANY_EMAIL" VARCHAR2(100) NOT NULL
)
;

CREATE TABLE  "LICENSE"
(
	"LICENSE_NUMBER" NUMBER(9) NOT NULL,
	"LICENSE_EXPIREY_DATE" DATE NOT NULL
)
;

CREATE TABLE  "LOCATION"
(
	"LOCATION_ID" NUMBER(3) NOT NULL,
	"LOCARTION_ROAD" NUMBER(4) NOT NULL,
	"LOCATION_BLOCK" NUMBER(4) NOT NULL,
	"LOCATION_BUILDING" VARCHAR2(80) NOT NULL,
	"LOCATION_PHONE_NUMBER" VARCHAR2(15) NOT NULL,
	"LOCATION_CITY" VARCHAR2(20) NOT NULL,
	"LOCATION_WORKING_HOURS" VARCHAR2(60) NOT NULL,
	"LOCATION_WORKING_DAYS" VARCHAR2(80) NOT NULL,
	"LOCATION_EMAIL_ADDRESS" VARCHAR2(120) NOT NULL
)
;

CREATE TABLE  "MAINTENANCE"
(
	"MAINTENANCE_ID" NUMBER(8) NOT NULL,
	"MAINTENANCE_START_DATE" DATE NOT NULL,
	"MAINTENANCE_END_DATE" DATE NOT NULL,
	"NEXT_MAINTENANCE_DATE" DATE NOT NULL,
	"CAR_REGISTRATION_PLATE_NUMBER" NUMBER(6) NULL,
	"MAINTENANCE_TYPE" VARCHAR2(80) NULL
)
;

CREATE TABLE  "MAINTENANCE_TYPE"
(
	"MAINTENANCE_TYPE" VARCHAR2(80) NOT NULL,
	"MAINTENANCE_COST" NUMBER(4,2) NOT NULL,
	"MAINTENANCE_DESCRIPTION" VARCHAR2(300) NOT NULL
)
;

CREATE TABLE  "MANUFACTURER"
(
	"MANUFACTURER_ID" NUMBER(3) NOT NULL,
	"MANUFACTURER_NAME" VARCHAR2(80) NULL
)
;

CREATE TABLE  "MODEL"
(
	"MODEL_ID" NUMBER(6) NOT NULL,
	"MODEL_NAME" VARCHAR2(90) NULL,
	"FUEL_TYPE" VARCHAR2(80) NULL,
	"SEATING_CAPACITY" NUMBER(2) NOT NULL,
	"MANUFACTURER_ID" NUMBER(3) NULL
)
;

CREATE TABLE  "MODEL_ENGINE"
(
	"ENGINE_ID" NUMBER(8) NOT NULL,
	"MODEL_ID" NUMBER(6) NOT NULL
)
;

CREATE TABLE  "MODEL_OPTION"
(
	"MODEL_ID" NUMBER(6) NOT NULL,
	"OPTION_TYPE" VARCHAR2(100) NOT NULL
)
;

CREATE TABLE  "OPTION_DESCRIPTION"
(
	"OPTION_TYPE" VARCHAR2(35) NOT NULL,
	"OPTION_NOTES" VARCHAR2(200) NOT NULL
)
;

CREATE TABLE  "PAYMENT"
(
	"PAYMENT_ID" NUMBER(8) NOT NULL,
	"PAYMENT_METHOD" VARCHAR2(60) NOT NULL,
	"PAYMENT_DATE" DATE NOT NULL,
	"PAYMENT_STATUS" VARCHAR2(80) NOT NULL,
	"CAR_RENTAL_ID" NUMBER(9) NULL
)
;

CREATE TABLE  "PENALTY"
(
	"PENALTY_ID" NUMBER(6) NOT NULL,
	"CAR_RENTAL_ID" NUMBER(9) NULL,
	"PENALTY_AMOUNT" NUMBER(8,2) NULL
)
;

CREATE TABLE  "RENTAL_REVIEW"
(
	"REVIEW_ID" NUMBER(8) NOT NULL,
	"REVIEW_DATE" DATE NOT NULL,
	"REVIEW_RATE" NUMBER(2) NOT NULL,
	"REVIEW_COMMENT" VARCHAR2(450) NULL,
	"CAR_RENTAL_ID" NUMBER(9) NULL
)
;

CREATE TABLE  "RENTAL_STATUS"
(
	"RENTAL_STATUS_ID" NUMBER(8) NOT NULL,
	"RENTAL_STATUS_DESCRIPTION" VARCHAR2(150) NULL
)
;

/* Create Primary Keys, Indexes, Uniques, Checks, Triggers */

ALTER TABLE  "ACCIDENT_REPORT" 
 ADD CONSTRAINT "PK_ACCIDENT_REP_01"
	PRIMARY KEY ("ACCIDENT_REPORT_ID") 
 USING INDEX
;

CREATE INDEX "IXFK_ACCIDENT_REPORT_CAR"   
 ON  "ACCIDENT_REPORT" ("CAR_REGISTRATION_PLATE_NUMBER") 
;

ALTER TABLE  "ADDRESS" 
 ADD CONSTRAINT "PK_ADDRESS"
	PRIMARY KEY ("ADDRESS_ID") 
 USING INDEX
;

CREATE INDEX "IXFK_ADDRESS_CUSTOMER"   
 ON  "ADDRESS" ("CUSTOMER_ID") 
;

ALTER TABLE  "CAR" 
 ADD CONSTRAINT "PK_CAR_01"
	PRIMARY KEY ("CAR_REGISTRATION_PLATE_NUMBER") 
 USING INDEX
;

CREATE INDEX "IXFK_CAR_CAR_CATEGORY"   
 ON  "CAR" ("CATEGORY_ID") 
;

CREATE INDEX "IXFK_CAR_LOCATION"   
 ON  "CAR" ("LOCATION_ID") 
;

CREATE INDEX "IXFK_CAR_MODEL"   
 ON  "CAR" ("MODEL_ID") 
;

CREATE INDEX "IXFK_CAR_RENTAL_STATUS"   
 ON  "CAR" ("RENTAL_STATUS_ID") 
;

ALTER TABLE  "CAR_CATEGORY" 
 ADD CONSTRAINT "PK_CAR_CATEGORY"
	PRIMARY KEY ("CATEGORY_ID") 
 USING INDEX
;

ALTER TABLE  "CAR_INSPECTION" 
 ADD CONSTRAINT "PK_CAR_INSPECTION"
	PRIMARY KEY ("INSPECTION_ID") 
 USING INDEX
;

CREATE INDEX "IXFK_CAR_INSPECTION_CAR"   
 ON  "CAR_INSPECTION" ("CAR_REGISTRATION_PLATE_NUMBER") 
;

ALTER TABLE  "CAR_INSURANCE" 
 ADD CONSTRAINT "PK_CAR_INSURANCE"
	PRIMARY KEY ("INSURANCE_ID","CAR_REGISTRATION_PLATE_NUMBER") 
 USING INDEX
;

ALTER TABLE  "CAR_INSURANCE" 
 ADD CONSTRAINT "CHK_END_DATE" CHECK (insurance_end_date > insurance_start_date)
;

CREATE INDEX "IXFK_CAR_INSURANCE_CAR"   
 ON  "CAR_INSURANCE" ("CAR_REGISTRATION_PLATE_NUMBER") 
;

CREATE INDEX "IXFK_CAR_INSURANCE_INSURANCE"   
 ON  "CAR_INSURANCE" ("INSURANCE_ID") 
;

ALTER TABLE  "CAR_RENTAL" 
 ADD CONSTRAINT "PK_CAR_RENTAL"
	PRIMARY KEY ("CAR_RENTAL_ID") 
 USING INDEX
;

ALTER TABLE  "CAR_RENTAL" 
 ADD CONSTRAINT "CHK_CAR_RENTAL_END_DATE" CHECK (car_rental_end_date >= car_rental_start_date)
;

CREATE INDEX "IXFK_CAR_RENTAL_CAR"   
 ON  "CAR_RENTAL" ("CAR_REGISTRATION_PLATE_NUMBER") 
;

CREATE INDEX "IXFK_CAR_RENTAL_CAR_RENTA01"   
 ON  "CAR_RENTAL" ("CAR_RENTAL_STATUS_ID") 
;

CREATE INDEX "IXFK_CAR_RENTAL_CUSTOMER"   
 ON  "CAR_RENTAL" ("CUSTOMER_ID") 
;

CREATE INDEX "IXFK_CAR_RENTAL_DISCOUNT"   
 ON  "CAR_RENTAL" ("DISCOUNT_CODE") 
;

CREATE INDEX "IXFK_CAR_RENTAL_EMPLOYEE"   
 ON  "CAR_RENTAL" ("EMPLOYEE_ID") 
;

ALTER TABLE  "CAR_RENTAL_STATUS" 
 ADD CONSTRAINT "PK_CAR_RENTAL_S_01"
	PRIMARY KEY ("CAR_RENTAL_STATUS_ID") 
 USING INDEX
;

ALTER TABLE  "CARD_DETAIL" 
 ADD CONSTRAINT "PK_CARD_DETAIL"
	PRIMARY KEY ("CARD_NUMBER") 
 USING INDEX
;

CREATE INDEX "IXFK_CARD_DETAIL_CUSTOMER"   
 ON  "CARD_DETAIL" ("CUSTOMER_ID") 
;

ALTER TABLE  "CUSTOMER" 
 ADD CONSTRAINT "PK_CUSTOMER"
	PRIMARY KEY ("CUSTOMER_ID") 
 USING INDEX
;

ALTER TABLE  "CUSTOMER" 
 ADD CONSTRAINT "CHK_FIRST_NAME" CHECK (customer_first_name= initcap(customer_first_name))
;

ALTER TABLE  "CUSTOMER" 
 ADD CONSTRAINT "CHK_LAST_NAME" CHECK (customer_last_name= initcap(customer_last_name))
;

CREATE INDEX "IXFK_CUSTOMER_LICENSE"   
 ON  "CUSTOMER" ("LICENSE_NUMBER") 
;

ALTER TABLE  "DISCOUNT" 
 ADD CONSTRAINT "PK_DISCOUNT"
	PRIMARY KEY ("DISCOUNT_CODE") 
 USING INDEX
;

ALTER TABLE  "DISCOUNT" 
 ADD CONSTRAINT "CHK_DISCOUNT_END_DATE" CHECK (DISCOUNT_EXPIRATION_DATE <> DISCOUNT_START_DATE)
;

ALTER TABLE  "EMPLOYEE" 
 ADD CONSTRAINT "PK_EMPLOYEE"
	PRIMARY KEY ("EMPLOYEE_ID") 
 USING INDEX
;

ALTER TABLE  "EMPLOYEE" 
 ADD CONSTRAINT "CHK_MANAGER_ID" CHECK (manager_id <> employee_id)
;

ALTER TABLE  "EMPLOYEE" 
 ADD CONSTRAINT "CHK_SALARY" CHECK (EMPLOYEE_SALARY>400)
;

CREATE INDEX "IXFK_EMPLOYEE_LOCATION"   
 ON  "EMPLOYEE" ("LOCATION_ID") 
;

ALTER TABLE  "ENGINE" 
 ADD CONSTRAINT "PK_ENGINE"
	PRIMARY KEY ("ENGINE_ID") 
 USING INDEX
;

ALTER TABLE  "EXTRA_EQUIPMENT" 
 ADD CONSTRAINT "PK_EXTRA_EQUIPMENT"
	PRIMARY KEY ("EQUIPMENT_ID") 
 USING INDEX
;

ALTER TABLE  "EXTRA_RENTAL" 
 ADD CONSTRAINT "PK_EXTRA_RENTAL"
	PRIMARY KEY ("CAR_RENTAL_ID","EQUIPMENT_ID") 
 USING INDEX
;

CREATE INDEX "IXFK_EXTRA_RENTAL_CAR_RENTAL"   
 ON  "EXTRA_RENTAL" ("CAR_RENTAL_ID") 
;

CREATE INDEX "IXFK_EXTRA_RENTAL_EXTRA_E01"   
 ON  "EXTRA_RENTAL" ("EQUIPMENT_ID") 
;

ALTER TABLE  "INSURANCE" 
 ADD CONSTRAINT "PK_INSURANCE"
	PRIMARY KEY ("INSURANCE_ID") 
 USING INDEX
;

CREATE INDEX "IXFK_INSURANCE_INSURANCE_01"   
 ON  "INSURANCE" ("INSURANCE_COMPANY_ID") 
;

ALTER TABLE  "INSURANCE_COMPANY" 
 ADD CONSTRAINT "PK_INSURANCE_CO_01"
	PRIMARY KEY ("INSURANCE_COMPANY_ID") 
 USING INDEX
;

ALTER TABLE  "LICENSE" 
 ADD CONSTRAINT "PK_LICENSE"
	PRIMARY KEY ("LICENSE_NUMBER") 
 USING INDEX
;

ALTER TABLE  "LOCATION" 
 ADD CONSTRAINT "PK_LOCATION"
	PRIMARY KEY ("LOCATION_ID") 
 USING INDEX
;

ALTER TABLE  "MAINTENANCE" 
 ADD CONSTRAINT "PK_MAINTENANCE"
	PRIMARY KEY ("MAINTENANCE_ID") 
 USING INDEX
;

ALTER TABLE  "MAINTENANCE" 
 ADD CONSTRAINT "CHK_MAINTENANCE_DATE" CHECK (MAINTENANCE_END_DATE>=MAINTENANCE_START_DATE)
;



CREATE INDEX "IXFK_MAINTENANCE_CAR"   
 ON  "MAINTENANCE" ("CAR_REGISTRATION_PLATE_NUMBER") 
;

CREATE INDEX "IXFK_MAINTENANCE_MAINTENA01"   
 ON  "MAINTENANCE" ("MAINTENANCE_TYPE") 
;

ALTER TABLE  "MAINTENANCE_TYPE" 
 ADD CONSTRAINT "PK_MAINTENANCE__01"
	PRIMARY KEY ("MAINTENANCE_TYPE") 
 USING INDEX
;

ALTER TABLE  "MANUFACTURER" 
 ADD CONSTRAINT "PK_MANUFACTURER"
	PRIMARY KEY ("MANUFACTURER_ID") 
 USING INDEX
;

ALTER TABLE  "MODEL" 
 ADD CONSTRAINT "PK_MODEL"
	PRIMARY KEY ("MODEL_ID") 
 USING INDEX
;

CREATE INDEX "IXFK_MODEL_MANUFACTURER"   
 ON  "MODEL" ("MANUFACTURER_ID") 
;

ALTER TABLE  "MODEL_ENGINE" 
 ADD CONSTRAINT "PK_MODEL_ENGINE"
	PRIMARY KEY ("MODEL_ID","ENGINE_ID") 
 USING INDEX
;

CREATE INDEX "IXFK_MODEL_ENGINE_ENGINE"   
 ON  "MODEL_ENGINE" ("ENGINE_ID") 
;

CREATE INDEX "IXFK_MODEL_ENGINE_MODEL"   
 ON  "MODEL_ENGINE" ("MODEL_ID") 
;

ALTER TABLE  "MODEL_OPTION" 
 ADD CONSTRAINT "PK_MODEL_OPTION"
	PRIMARY KEY ("OPTION_TYPE","MODEL_ID") 
 USING INDEX
;

CREATE INDEX "IXFK_MODEL_OPTION_MODEL"   
 ON  "MODEL_OPTION" ("MODEL_ID") 
;

CREATE INDEX "IXFK_MODEL_OPTION_OPTION"   
 ON  "MODEL_OPTION" ("OPTION_TYPE") 
;

ALTER TABLE  "OPTION_DESCRIPTION" 
 ADD CONSTRAINT "PK_CAR_OPTION_DESCRIPTION"
	PRIMARY KEY ("OPTION_TYPE") 
 USING INDEX
;

ALTER TABLE  "PAYMENT" 
 ADD CONSTRAINT "PK_PAYMENT_TRANSA_01"
	PRIMARY KEY ("PAYMENT_ID") 
 USING INDEX
;

CREATE INDEX "IXFK_PAYMENT_CAR_RENTAL"   
 ON  "PAYMENT" ("CAR_RENTAL_ID") 
;

ALTER TABLE  "PENALTY" 
 ADD CONSTRAINT "PK_PENALTY"
	PRIMARY KEY ("PENALTY_ID") 
 USING INDEX
;

CREATE INDEX "IXFK_PENALTY_CAR_RENTAL"   
 ON  "PENALTY" ("CAR_RENTAL_ID") 
;

ALTER TABLE  "RENTAL_REVIEW" 
 ADD CONSTRAINT "PK_RENTAL_REVIEW"
	PRIMARY KEY ("REVIEW_ID") 
 USING INDEX
;

CREATE INDEX "IXFK_RENTAL_REVIEW_CAR_RENTAL"   
 ON  "RENTAL_REVIEW" ("CAR_RENTAL_ID") 
;

ALTER TABLE  "RENTAL_STATUS" 
 ADD CONSTRAINT "PK_RENTAL_STATU_01"
	PRIMARY KEY ("RENTAL_STATUS_ID") 
 USING INDEX
;

/* Create Foreign Key Constraints */

ALTER TABLE  "ACCIDENT_REPORT" 
 ADD CONSTRAINT "FK_ACCIDENT_REPORT_CAR"
	FOREIGN KEY ("CAR_REGISTRATION_PLATE_NUMBER") REFERENCES  "CAR" ("CAR_REGISTRATION_PLATE_NUMBER")
;

ALTER TABLE  "ADDRESS" 
 ADD CONSTRAINT "FK_ADDRESS_CUSTOMER02"
	FOREIGN KEY ("CUSTOMER_ID") REFERENCES  "CUSTOMER" ("CUSTOMER_ID")
;

ALTER TABLE  "CAR" 
 ADD CONSTRAINT "FK_CAR_CAR_CATEGORY"
	FOREIGN KEY ("CATEGORY_ID") REFERENCES  "CAR_CATEGORY" ("CATEGORY_ID")
;

ALTER TABLE  "CAR" 
 ADD CONSTRAINT "FK_CAR_LOCATION"
	FOREIGN KEY ("LOCATION_ID") REFERENCES  "LOCATION" ("LOCATION_ID")
;

ALTER TABLE  "CAR" 
 ADD CONSTRAINT "FK_CAR_MODEL"
	FOREIGN KEY ("MODEL_ID") REFERENCES  "MODEL" ("MODEL_ID")
;

ALTER TABLE  "CAR" 
 ADD CONSTRAINT "FK_CAR_RENTAL_STATUS"
	FOREIGN KEY ("RENTAL_STATUS_ID") REFERENCES  "RENTAL_STATUS" ("RENTAL_STATUS_ID")
;

ALTER TABLE  "CAR_INSPECTION" 
 ADD CONSTRAINT "FK_CAR_INSPECTION_CAR"
	FOREIGN KEY ("CAR_REGISTRATION_PLATE_NUMBER") REFERENCES  "CAR" ("CAR_REGISTRATION_PLATE_NUMBER")
;

ALTER TABLE  "CAR_INSURANCE" 
 ADD CONSTRAINT "FK_CAR_INSURANCE_CAR"
	FOREIGN KEY ("CAR_REGISTRATION_PLATE_NUMBER") REFERENCES  "CAR" ("CAR_REGISTRATION_PLATE_NUMBER")
;

ALTER TABLE  "CAR_INSURANCE" 
 ADD CONSTRAINT "FK_CAR_INSURANCE_INSURANCE"
	FOREIGN KEY ("INSURANCE_ID") REFERENCES  "INSURANCE" ("INSURANCE_ID")
;

ALTER TABLE  "CAR_RENTAL" 
 ADD CONSTRAINT "FK_CAR_RENTAL_CAR"
	FOREIGN KEY ("CAR_REGISTRATION_PLATE_NUMBER") REFERENCES  "CAR" ("CAR_REGISTRATION_PLATE_NUMBER")
;

ALTER TABLE  "CAR_RENTAL" 
 ADD CONSTRAINT "FK_CAR_RENTAL_CAR_RENTAL_ST_01"
	FOREIGN KEY ("CAR_RENTAL_STATUS_ID") REFERENCES  "CAR_RENTAL_STATUS" ("CAR_RENTAL_STATUS_ID")
;

ALTER TABLE  "CAR_RENTAL" 
 ADD CONSTRAINT "FK_CAR_RENTAL_CUSTOMER"
	FOREIGN KEY ("CUSTOMER_ID") REFERENCES  "CUSTOMER" ("CUSTOMER_ID")
;

ALTER TABLE  "CAR_RENTAL" 
 ADD CONSTRAINT "FK_CAR_RENTAL_DISCOUNT"
	FOREIGN KEY ("DISCOUNT_CODE") REFERENCES  "DISCOUNT" ("DISCOUNT_CODE")
;

ALTER TABLE  "CAR_RENTAL" 
 ADD CONSTRAINT "FK_CAR_RENTAL_EMPLOYEE"
	FOREIGN KEY ("EMPLOYEE_ID") REFERENCES  "EMPLOYEE" ("EMPLOYEE_ID")
;

ALTER TABLE  "CARD_DETAIL" 
 ADD CONSTRAINT "FK_CARD_DETAIL_CUSTOMER"
	FOREIGN KEY ("CUSTOMER_ID") REFERENCES  "CUSTOMER" ("CUSTOMER_ID")
;

ALTER TABLE  "CUSTOMER" 
 ADD CONSTRAINT "FK_CUSTOMER_LICENSE"
	FOREIGN KEY ("LICENSE_NUMBER") REFERENCES  "LICENSE" ("LICENSE_NUMBER")
;

ALTER TABLE  "EMPLOYEE" 
 ADD CONSTRAINT "FK_EMPLOYEE_LOCATION"
	FOREIGN KEY ("LOCATION_ID") REFERENCES  "LOCATION" ("LOCATION_ID")
;

ALTER TABLE  "EXTRA_RENTAL" 
 ADD CONSTRAINT "FK_EXTRA_RENTAL_CAR_RENTAL"
	FOREIGN KEY ("CAR_RENTAL_ID") REFERENCES  "CAR_RENTAL" ("CAR_RENTAL_ID")
;

ALTER TABLE  "EXTRA_RENTAL" 
 ADD CONSTRAINT "FK_EXTRA_RENTAL_EXTRA_EQUIP_01"
	FOREIGN KEY ("EQUIPMENT_ID") REFERENCES  "EXTRA_EQUIPMENT" ("EQUIPMENT_ID")
;

ALTER TABLE  "INSURANCE" 
 ADD CONSTRAINT "FK_INSURANCE_INSURANCE_COMPANY"
	FOREIGN KEY ("INSURANCE_COMPANY_ID") REFERENCES  "INSURANCE_COMPANY" ("INSURANCE_COMPANY_ID")
;

ALTER TABLE  "MAINTENANCE" 
 ADD CONSTRAINT "FK_MAINTENANCE_CAR"
	FOREIGN KEY ("CAR_REGISTRATION_PLATE_NUMBER") REFERENCES  "CAR" ("CAR_REGISTRATION_PLATE_NUMBER")
;

ALTER TABLE  "MAINTENANCE" 
 ADD CONSTRAINT "FK_MAINTENANCE_MAINTENANCE__01"
	FOREIGN KEY ("MAINTENANCE_TYPE") REFERENCES  "MAINTENANCE_TYPE" ("MAINTENANCE_TYPE")
;

ALTER TABLE  "MODEL" 
 ADD CONSTRAINT "FK_MODEL_MANUFACTURER"
	FOREIGN KEY ("MANUFACTURER_ID") REFERENCES  "MANUFACTURER" ("MANUFACTURER_ID")
;

ALTER TABLE  "MODEL_ENGINE" 
 ADD CONSTRAINT "FK_MODEL_ENGINE_ENGINE"
	FOREIGN KEY ("ENGINE_ID") REFERENCES  "ENGINE" ("ENGINE_ID")
;

ALTER TABLE  "MODEL_ENGINE" 
 ADD CONSTRAINT "FK_MODEL_ENGINE_MODEL"
	FOREIGN KEY ("MODEL_ID") REFERENCES  "MODEL" ("MODEL_ID")
;

ALTER TABLE  "MODEL_OPTION" 
 ADD CONSTRAINT "FK_MODEL_OPTION_MODEL"
	FOREIGN KEY ("MODEL_ID") REFERENCES  "MODEL" ("MODEL_ID")
;

ALTER TABLE  "MODEL_OPTION" 
 ADD CONSTRAINT "FK_MODEL_OPTION_OPTION_DESC_01"
	FOREIGN KEY ("OPTION_TYPE") REFERENCES  "OPTION_DESCRIPTION" ("OPTION_TYPE")
;

ALTER TABLE  "PAYMENT" 
 ADD CONSTRAINT "FK_PAYMENT_CAR_RENTAL"
	FOREIGN KEY ("CAR_RENTAL_ID") REFERENCES  "CAR_RENTAL" ("CAR_RENTAL_ID")
;

ALTER TABLE  "PENALTY" 
 ADD CONSTRAINT "FK_PENALTY_CAR_RENTAL"
	FOREIGN KEY ("CAR_RENTAL_ID") REFERENCES  "CAR_RENTAL" ("CAR_RENTAL_ID")
;

ALTER TABLE  "RENTAL_REVIEW" 
 ADD CONSTRAINT "FK_RENTAL_REVIEW_CAR_RENTAL"
	FOREIGN KEY ("CAR_RENTAL_ID") REFERENCES  "CAR_RENTAL" ("CAR_RENTAL_ID")
;

--!DDL script for creating indexes
--CAR
CREATE INDEX car_rental_status_model_IX ON CAR(RENTAL_STATUS_ID, MODEL_ID);
CREATE INDEX car_mileage_IX ON CAR(CAR_CURRENT_MILEAGE);
CREATE INDEX car_daily_rate_IX ON CAR(CAR_REGISTRATION_PLATE_NUMBER,CAR_DAILY_HIRE_RATE);
CREATE INDEX car_daily_late_rate_IX ON CAR(CAR_DAILY_LATE_RETURN_PANELTY);


-- CUSTOMER
CREATE INDEX customer_name_phone_IX ON CUSTOMER(CUSTOMER_FIRST_NAME, CUSTOMER_LAST_NAME, CUSTOMER_PHONE_NUMBER);
CREATE INDEX customer_loyalty_points_IX ON CUSTOMER(LOYALITY_POINTS);
CREATE INDEX customer_cpr_IX ON CUSTOMER(CUSTOMER_CPR);


-- EMPLOYEE
CREATE INDEX employee_name_email_IX ON EMPLOYEE(EMPLOYEE_FIRST_NAME, EMPLOYEE_LAST_NAME, EMPLOYEE_EMAIL);
CREATE INDEX employee_mgr_IX ON EMPLOYEE(MANAGER_ID);
CREATE INDEX employee_office_IX ON EMPLOYEE(EMPLOYEE_OFFICE_LOCATION,EMPLOYEE_OFFICE_HOURS);
CREATE INDEX employee_sal_com_IX ON EMPLOYEE(EMPLOYEE_SALARY,EMPLOYEE_COMMISION_PCT);


-- CAR_RENTAL
CREATE INDEX rental_customer_car_IX ON CAR_RENTAL(CUSTOMER_ID, CAR_REGISTRATION_PLATE_NUMBER);
CREATE INDEX rental_dates_IX ON CAR_RENTAL(CAR_RENTAL_START_DATE, CAR_RENTAL_END_DATE, CAR_RENTAL_RETURN_DATE);


-- MAINTENANCE
CREATE INDEX maintenance_dates_IX ON MAINTENANCE(MAINTENANCE_START_DATE, MAINTENANCE_END_DATE, NEXT_MAINTENANCE_DATE);

--INSURANCE
CREATE INDEX insurance_type_cost_IX ON INSURANCE(INSURANCE_TYPE,INSURANCE_COST);


-- CARD_DETAIL
CREATE INDEX card_customer_id_IX ON CARD_DETAIL(CUSTOMER_ID,CARD_NUMBER);

-- DISCOUNT
CREATE INDEX discount_start_date_IX ON DISCOUNT(DISCOUNT_START_DATE,DISCOUNT_EXPIRATION_DATE);

-- LICENSE
CREATE INDEX license_expirey_date_IX ON LICENSE(LICENSE_EXPIREY_DATE);

-- MANUFACTURER
CREATE INDEX manufacturer_name_IX ON MANUFACTURER(MANUFACTURER_NAME);

-- MODEL
CREATE INDEX model_fuel_seating_IX ON MODEL(FUEL_TYPE, SEATING_CAPACITY);


-- PAYMENT
CREATE INDEX payment_method_IX ON PAYMENT(PAYMENT_METHOD);

-- PENALTY
CREATE INDEX penalty_amount_IX ON PENALTY(PENALTY_AMOUNT);

-- LOCATION
CREATE INDEX location_city_IX ON LOCATION(LOCATION_CITY);
CREATE INDEX location_email_IX ON LOCATION(LOCATION_EMAIL_ADDRESS);


--!DDL script for creating sequences
--dropping sequences if they exist
begin
	EXECUTE IMMEDIATE 'DROP SEQUENCE   "EMP_ID_SEQ"';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP SEQUENCE   "CUST_ID_SEQ"';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP SEQUENCE   "ADDR_ID_SEQ"';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP SEQUENCE   "PAY_ID_SEQ"';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP SEQUENCE   "CAR_RNT_ID_SEQ"';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP SEQUENCE   "MANUF_ID_SEQ"';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/


begin
	EXECUTE IMMEDIATE 'DROP SEQUENCE   "LOC_ID_SEQ"';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP SEQUENCE   "CAR_INSP_ID_SEQ"';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP SEQUENCE   "ENG_ID_SEQ"';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP SEQUENCE   "MOD_ID_SEQ"';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP SEQUENCE   "CAR_CAT_ID_SEQ"';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP SEQUENCE   "MAINT_ID_SEQ"';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP SEQUENCE   "ACC_REP_ID_SEQ"';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP SEQUENCE   "INSU_ID_SEQ"';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP SEQUENCE   "RENT_REV_ID_SEQ"';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP SEQUENCE   "INSU_COMP_ID_SEQ"';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP SEQUENCE   "EXT_EQUIP_SEQ"';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP SEQUENCE   "RENT_STAT_SEQ"';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP SEQUENCE   "PENALTY_SEQ"';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP SEQUENCE   "CAR_RENT_STAT_SEQ"';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/



--creating sequences
CREATE SEQUENCE EMP_ID_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 3500 MINVALUE 1  NOCYCLE CACHE 200; 
 
CREATE SEQUENCE CUST_ID_SEQ INCREMENT BY 1 START WITH 1 NOMAXVALUE MINVALUE 1  NOCYCLE CACHE 200; 
 
CREATE SEQUENCE ADDR_ID_SEQ INCREMENT BY 1 START WITH 1 NOMAXVALUE MINVALUE 1  NOCYCLE CACHE 30; 

CREATE SEQUENCE PAY_ID_SEQ INCREMENT BY 1 START WITH 1 NOMAXVALUE MINVALUE 1  NOCYCLE CACHE 156;
 
CREATE SEQUENCE CAR_RNT_ID_SEQ INCREMENT BY 1 START WITH 1 NOMAXVALUE MINVALUE 1  NOCYCLE CACHE 100; 

CREATE SEQUENCE MANUF_ID_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 200 MINVALUE 1  NOCYCLE CACHE 10; 


CREATE SEQUENCE LOC_ID_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 5 MINVALUE 1  NOCYCLE CACHE 5; 
 

CREATE SEQUENCE CAR_INSP_ID_SEQ INCREMENT BY 1 START WITH 1 NOMAXVALUE MINVALUE 1  NOCYCLE CACHE 100; 
 
CREATE SEQUENCE ENG_ID_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 60 MINVALUE 1  NOCYCLE CACHE 35; 
 
CREATE SEQUENCE MOD_ID_SEQ INCREMENT BY 1 START WITH 1 NOMAXVALUE MINVALUE 1  NOCYCLE CACHE 100; 
 
CREATE SEQUENCE CAR_CAT_ID_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 100 MINVALUE 1  NOCYCLE CACHE 2; 
 
CREATE SEQUENCE MAINT_ID_SEQ INCREMENT BY 1 START WITH 1 NOMAXVALUE MINVALUE 1  NOCYCLE CACHE 235; 
 
CREATE SEQUENCE ACC_REP_ID_SEQ INCREMENT BY 1 START WITH 1 NOMAXVALUE MINVALUE 1  NOCYCLE CACHE 100;
 
CREATE SEQUENCE INSU_ID_SEQ INCREMENT BY 1 START WITH 1 NOMAXVALUE MINVALUE 1  NOCYCLE CACHE 80; 
 
CREATE SEQUENCE RENT_REV_ID_SEQ INCREMENT BY 1 START WITH 1 NOMAXVALUE MINVALUE 1  NOCYCLE CACHE 25; 
 
CREATE SEQUENCE INSU_COMP_ID_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 100 MINVALUE 1  NOCYCLE CACHE 40; 
 
CREATE SEQUENCE EXT_EQUIP_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 500 MINVALUE 1  NOCYCLE CACHE 30;

CREATE SEQUENCE RENT_STAT_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 50 MINVALUE 1  NOCYCLE CACHE 15;

CREATE SEQUENCE PENALTY_SEQ INCREMENT BY 1 START WITH 1 NOMAXVALUE MINVALUE 1  NOCYCLE CACHE 15;

CREATE SEQUENCE CAR_RENT_STAT_SEQ INCREMENT BY 1 START WITH 1 NOMAXVALUE MINVALUE 1  NOCYCLE CACHE 15;

--!PL/SQL script for creating triggers.
--TRIGGERS
--!TRIGGER 1:
-- The trigger 'payment_trg' automates insert in payment entity and car status's update in car rental and is fired whenever a new car rental record is inserted. It will check whether the car rental status  is cancelled or pending it will update the car status to available and inserts a new record in payment entity with the payment status being 'Rejected'. Meanwhile, in other cases when the car rental status is successful it will update the car status to 'booked' and inserts a new records in payment entity with the payment status being 'Success'.

CREATE OR REPLACE TRIGGER payment_trg
AFTER INSERT ON CAR_RENTAL
FOR EACH ROW
DECLARE
    v_payment_status VARCHAR2(60);
BEGIN
    -- Set payment status based on car rental status
    CASE
        WHEN :NEW.CAR_RENTAL_STATUS_ID = 3 OR :NEW.CAR_RENTAL_STATUS_ID = 6 THEN 
            v_payment_status := 'Rejected';
            
            -- Update car rental status to available
            UPDATE CAR 
            SET RENTAL_STATUS_ID = (SELECT RENTAL_STATUS_ID FROM RENTAL_STATUS WHERE RENTAL_STATUS_DESCRIPTION='Available')
            WHERE CAR_REGISTRATION_PLATE_NUMBER = :NEW.CAR_REGISTRATION_PLATE_NUMBER;
            
            -- Insert payment record for the car rental
            INSERT INTO PAYMENT (PAYMENT_ID, PAYMENT_METHOD, PAYMENT_DATE, PAYMENT_STATUS, CAR_RENTAL_ID)
            VALUES (PAY_ID_SEQ.NEXTVAL, 'cash', :NEW.CAR_RENTAL_START_DATE, v_payment_status, :NEW.CAR_RENTAL_ID);
        ELSE
            v_payment_status := 'Success';
            
            -- Update car rental status to rented out
            UPDATE CAR 
            SET RENTAL_STATUS_ID = (SELECT RENTAL_STATUS_ID FROM RENTAL_STATUS WHERE RENTAL_STATUS_DESCRIPTION='Booked')
            WHERE CAR_REGISTRATION_PLATE_NUMBER = :NEW.CAR_REGISTRATION_PLATE_NUMBER;
            
            -- Insert payment record for the car rental
            INSERT INTO PAYMENT (PAYMENT_ID, PAYMENT_METHOD, PAYMENT_DATE, PAYMENT_STATUS, CAR_RENTAL_ID)
            VALUES (PAY_ID_SEQ.NEXTVAL, 'cash', :NEW.CAR_RENTAL_START_DATE, v_payment_status, :NEW.CAR_RENTAL_ID);
    END CASE;
END;
/


--!TRIGGER 2
--The trigger 'update_car_rental_status_before_trg', which is fired before a new record is inserted into the CAR_RENTAL table, manages the car rental status for new car rentals by checking if the requested car is available and setting the car rental status accordingly. It also updates the car status to 'Booked' after a successful rental to prevent the car from being rented during the same period. Additionally, exceptions are included to handle cases where no data is found or other errors occur.

CREATE OR REPLACE TRIGGER update_car_rental_status_before_trg
BEFORE INSERT ON CAR_RENTAL
FOR EACH ROW
DECLARE
  v_available_status_id NUMBER;
  v_not_available_status_id NUMBER;
  v_confirmed_status_id NUMBER;
  v_cancelled_status_id NUMBER;
  v_car_status_id NUMBER;
BEGIN
  -- Fetch the status IDs for 'Available' and 'Booked'
  SELECT RENTAL_STATUS_ID INTO v_available_status_id
  FROM RENTAL_STATUS
  WHERE RENTAL_STATUS_DESCRIPTION = 'Available';

  SELECT RENTAL_STATUS_ID INTO v_not_available_status_id
  FROM RENTAL_STATUS
  WHERE RENTAL_STATUS_DESCRIPTION = 'Booked';

  -- Fetch the status IDs for 'Confirmed' and 'Cancelled'
  SELECT CAR_RENTAL_STATUS_ID INTO v_confirmed_status_id
  FROM CAR_RENTAL_STATUS
  WHERE CAR_RENTAL_STATUS_DESCRIPTION = 'Confirmed';

  SELECT CAR_RENTAL_STATUS_ID INTO v_cancelled_status_id
  FROM CAR_RENTAL_STATUS
  WHERE CAR_RENTAL_STATUS_DESCRIPTION = 'Cancelled';

  -- Fetch the current car status based on CAR_REGISTRATION_PLATE_NUMBER
  SELECT RENTAL_STATUS_ID INTO v_car_status_id
  FROM CAR
  WHERE CAR_REGISTRATION_PLATE_NUMBER = :NEW.CAR_REGISTRATION_PLATE_NUMBER;

  -- If car is available, set rental status to 'Confirmed' and update car status to 'Booked'
  IF v_car_status_id = v_available_status_id THEN
    -- Set car rental status to 'Confirmed'
    :NEW.CAR_RENTAL_STATUS_ID := v_confirmed_status_id;

    -- Update car status to 'Booked'
    UPDATE CAR
    SET RENTAL_STATUS_ID = v_not_available_status_id
    WHERE CAR_REGISTRATION_PLATE_NUMBER = :NEW.CAR_REGISTRATION_PLATE_NUMBER;
  ELSE
    -- Set car rental status to 'Cancelled'
    :NEW.CAR_RENTAL_STATUS_ID := v_cancelled_status_id;
  END IF;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    -- Handle the case when no data is found
    DBMS_OUTPUT.PUT_LINE('No data found in the trigger');
  WHEN OTHERS THEN
    -- Handle other exceptions
    DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
/




--!TRIGGER 3: 
--The trigger 'chk_equipment_quantity_trg' updates the extra equipment quantity before insert on extra rental. The trigger first validates that the status of the car rental is 'Confirmed' and that the desired quantity is available. If the car rental status is not 'Confirmed' an error message will be displayed indicating so. However, if the status is confirmed but the quanitity is greater than the available quantiity or the stock is empty an error message will be displayed indicating so. If the desired quantity is available the trigger will update the stock quantity by reducing the current stock quantity with the desired quantity of the specific extra equipment.

SET SERVEROUTPUT ON;
CREATE OR REPLACE TRIGGER chk_equipment_quantity_trg
BEFORE INSERT ON EXTRA_RENTAL
FOR EACH ROW
DECLARE
v_equipment_quantity NUMBER;
v_equipment_name varchar2(100);
v_car_rental_status_id NUMBER;
v_confirmed_status_id NUMBER;
BEGIN
--store the value of car rental Status
SELECT CAR_RENTAL_STATUS_ID INTO v_car_rental_status_id FROM CAR_RENTAL WHERE CAR_RENTAL_ID=:NEW.CAR_RENTAL_ID;
--store the id of car rental status = Confirmed
SELECT CAR_RENTAL_STATUS_ID into v_confirmed_status_id FROM CAR_RENTAL_STATUS WHERE CAR_RENTAL_STATUS_DESCRIPTION='Confirmed';
--store the available quantity 
SELECT EQUIPMENT_QUANTITY_ON_STOCK INTO v_equipment_quantity FROM EXTRA_EQUIPMENT WHERE EQUIPMENT_ID= :NEW.EQUIPMENT_ID;
--store the equipment name
SELECT EQUPMENT_NAME INTO v_equipment_name FROM EXTRA_EQUIPMENT WHERE EQUIPMENT_ID=:NEW.EQUIPMENT_ID;
--check if the requested quantity is less than or equals the available quantity
IF v_car_rental_status_id != v_confirmed_status_id THEN
RAISE_APPLICATION_ERROR('-20009','The car rental status is not confirmed, you cannot rent extra equipment!');
ELSIF :NEW.quantity <= v_equipment_quantity THEN
    UPDATE EXTRA_EQUIPMENT SET EQUIPMENT_QUANTITY_ON_STOCK = v_equipment_quantity- :NEW.QUANTITY WHERE EQUIPMENT_ID=:NEW.EQUIPMENT_ID;
ELSE
    --check if the available quantity !=0
    IF v_equipment_quantity = 0  THEN
        RAISE_APPLICATION_ERROR('-20007','The requested equipment is out of stock!');
    ELSE 
        :NEW.QUANTITY:=v_equipment_quantity;
        DBMS_OUTPUT.PUT_LINE('Low stock!! You can only rent '|| v_equipment_quantity || ' '||v_equipment_name);
        UPDATE EXTRA_EQUIPMENT SET EQUIPMENT_QUANTITY_ON_STOCK = 0 WHERE EQUIPMENT_ID=:NEW.EQUIPMENT_ID;
    END IF;
END IF;
END;
/



--!TRIGGER 4
-- The ‘updateEquipmentQuantity_penalty_trg’ trigger is fired before the CAR_RENTAL_RETURN_DATE is updated in the CAR_RENTAL table. It manages penalties by comparing the return and end dates, calculates the penalty amount, and inserts a new record into the penalty table if there is a late return. It then sets the car rental status to 'Late Return'. If the return date is on or before the end date, it sets the status to 'Completed'. It also updated the rental status of the car to 'Available'. Additionally, the trigger updates the quantity of any extra equipment rented, returning it to stock.
CREATE OR REPLACE TRIGGER updateEquipmentQuantity_penalty_trg
BEFORE UPDATE OF CAR_RENTAL_RETURN_DATE ON CAR_RENTAL
FOR EACH ROW
DECLARE
  v_penalty_amount NUMBER(8,2);
  v_daily_late_penalty NUMBER(4,2);
  v_late_returned_status_id NUMBER;
  v_completed_status_id NUMBER;
BEGIN
SELECT CAR_RENTAL_STATUS_ID INTO v_completed_status_id FROM CAR_RENTAL_STATUS WHERE CAR_RENTAL_STATUS_DESCRIPTION='Completed';

SELECT CAR_RENTAL_STATUS_ID INTO v_late_returned_status_id FROM CAR_RENTAL_STATUS WHERE CAR_RENTAL_STATUS_DESCRIPTION='Late Return';
  IF :NEW.CAR_RENTAL_RETURN_DATE > :NEW.CAR_RENTAL_END_DATE AND :NEW.CAR_RENTAL_RETURN_DATE IS NOT NULL THEN
    -- Retrieve the daily late return penalty from the CAR table
    SELECT CAR_DAILY_LATE_RETURN_PANELTY INTO v_daily_late_penalty
    FROM CAR
    WHERE CAR_REGISTRATION_PLATE_NUMBER = :NEW.CAR_REGISTRATION_PLATE_NUMBER;
 
    -- Calculate penalty amount
    v_penalty_amount := (:NEW.CAR_RENTAL_RETURN_DATE - :NEW.CAR_RENTAL_END_DATE) * v_daily_late_penalty;
 
    -- Insert penalty record
    INSERT INTO PENALTY (PENALTY_ID, CAR_RENTAL_ID, PENALTY_AMOUNT)
    VALUES (PENALTY_SEQ.NEXTVAL, :NEW.CAR_RENTAL_ID, v_penalty_amount);
    
    --update car rental status = late CAR_RENTAL_RETURN_DATE
    :NEW.CAR_RENTAL_STATUS_ID:=v_late_returned_status_id;
    ELSIF :NEW.CAR_RENTAL_RETURN_DATE <= :NEW.CAR_RENTAL_END_DATE AND :NEW.CAR_RENTAL_RETURN_DATE IS NOT NULL  THEN
      :NEW.CAR_RENTAL_STATUS_ID:=v_completed_status_id;
    ELSE
    RAISE_APPLICATION_ERROR('-20002','Car is already returned');
  END IF;

  -- Update the quantity of each type of extra equipment
  FOR equipment IN (
    SELECT EQUIPMENT_ID, QUANTITY
    FROM EXTRA_RENTAL
    WHERE CAR_RENTAL_ID = :NEW.CAR_RENTAL_ID
  ) LOOP
    UPDATE EXTRA_EQUIPMENT
    SET EQUIPMENT_QUANTITY_ON_STOCK = EQUIPMENT_QUANTITY_ON_STOCK + equipment.QUANTITY
    WHERE EQUIPMENT_ID = equipment.EQUIPMENT_ID;
  END LOOP;
 
  -- Update car status to available
  UPDATE CAR
  SET RENTAL_STATUS_ID = (SELECT RENTAL_STATUS_ID FROM RENTAL_STATUS WHERE RENTAL_STATUS_DESCRIPTION = 'Available')
  WHERE CAR_REGISTRATION_PLATE_NUMBER = :NEW.CAR_REGISTRATION_PLATE_NUMBER;
END;
/

--!PL/SQL script for creating functions
--!FUNCTION 1 
--The function 'calculate daily late return penalty for car' calculates the daily late return penalty for the car based on the car category, year of manufacture, and the maximum 10% of daily hire rate. Returning the penalty amount without exceeding the maximum penalty. 

CREATE OR REPLACE FUNCTION calculate_daily_late_return_penalty_for_car(
    p_car_id IN CAR.CAR_REGISTRATION_PLATE_NUMBER%TYPE
) RETURN NUMBER IS 
    v_penalty_rate NUMBER;
    v_max_penalty NUMBER;
    v_category_id CAR.CATEGORY_ID%TYPE;
    v_car_year_manufactured CAR.YEAR_MANUFACTURED%TYPE;
    v_car_daily_hire_rate CAR.CAR_DAILY_HIRE_RATE%TYPE;
BEGIN
    -- Fetch necessary information based on car rental ID
  SELECT c.CATEGORY_ID, c.YEAR_MANUFACTURED, c.CAR_DAILY_HIRE_RATE
INTO v_category_id, v_car_year_manufactured, v_car_daily_hire_rate
FROM CAR c
JOIN CAR_CATEGORY cc ON c.category_id = cc.category_id 
WHERE c.CAR_REGISTRATION_PLATE_NUMBER = p_car_id;

        -- Determine the penalty rate based on the category and year manufactured
        SELECT 
            CASE
                WHEN v_category_id = 'ECO' THEN
                    CASE
                        WHEN v_car_year_manufactured >= 2020 THEN 0.04
                        ELSE 0.030
                    END
                WHEN v_category_id = 'LUX' THEN
                    CASE
                        WHEN v_car_year_manufactured >= 2020 THEN 0.06
                        ELSE 0.040
                    END
                WHEN v_category_id = 'SUV' THEN
                    CASE
                        WHEN v_car_year_manufactured >= 2020 THEN 0.05
                        ELSE 0.045
                    END
                WHEN v_category_id = 'ELC' THEN
                    CASE
                        WHEN v_car_year_manufactured >= 2020 THEN 0.075
                        ELSE 0.065
                    END
                ELSE 0.08 -- Default penalty rate for other categories
            END INTO v_penalty_rate
        FROM DUAL;

        -- Calculate the maximum penalty (10% of daily hire rate)
        v_max_penalty := v_car_daily_hire_rate * 0.1;

        -- Calculate the penalty, ensuring it does not exceed the maximum penalty
        RETURN LEAST(v_penalty_rate * v_car_daily_hire_rate , v_max_penalty); -- Returns the minimum value between the calculated penalty and the maximum penalty
        EXCEPTION
        WHEN OTHERS THEN RETURN NULL;
END;
/


--!FUNCTION 2:
-- The function 'predictedMaintenanceDate' will predict the next maintenance date by estimating how long it will take for the car to cover the remaining mileage. It is done through dividing the difference in mileage (desired and current mileage) by the average distance the car covers in a day during rentals. It then adds this calculated duration to the current date.
CREATE OR REPLACE FUNCTION predictedMaintenanceDate (
   v_car_reg NUMBER,
   v_desired_mileage NUMBER
) RETURN DATE
IS
   v_predicted_date DATE;
   v_current_mileage NUMBER := 0; -- Initialize variables
   v_rental_duration_avg NUMBER := 0;
BEGIN
   -- Get the current mileage for the car
   SELECT
       CAR_CURRENT_MILEAGE INTO v_current_mileage
   FROM CAR
   WHERE CAR_REGISTRATION_PLATE_NUMBER = v_car_reg;


   -- Calculate the average rental duration for the specific car
   SELECT
       AVG(CAR_RENTAL_END_DATE - CAR_RENTAL_START_DATE) INTO v_rental_duration_avg
   FROM CAR_RENTAL
   WHERE CAR_REGISTRATION_PLATE_NUMBER = v_car_reg
   AND CAR_RENTAL_END_DATE IS NOT NULL; --  only completed rentals will be considered

   -- Avoid division by zero and handle null values
   IF v_current_mileage = 0 OR v_rental_duration_avg IS NULL OR v_rental_duration_avg = 0 THEN
       RETURN NULL;
   END IF;

   -- Calculate the predicted date
   v_predicted_date := SYSDATE + CEIL((v_desired_mileage - v_current_mileage) / (v_current_mileage / v_rental_duration_avg));

   RETURN v_predicted_date;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
       RETURN NULL;
   WHEN OTHERS THEN
       RETURN NULL; -- Handle other exceptions as needed
END;
/


--!FUNCTION 3:
-- This function 'calcCarProfitForCar' will calculate the total profit of a specific car by multiplying the rental duration (difference between car_rental_end_date and car_rental_start_date) by the daily hire rate and then considering the penalty amount if the return date exceeds the car rental end date.If no data is found or if there are any other exceptions, the function returns NULL.
CREATE OR REPLACE FUNCTION calcCarProfitForCar(p_car_reg IN NUMBER) RETURN NUMBER IS
    v_total_profit NUMBER := 0;
    v_confirmed_status NUMBER;
    v_ongoing_status NUMBER;
    v_completed_status NUMBER;
    v_late_return_status NUMBER;
BEGIN
    -- Get the status IDs for 'Confirmed', 'On-going', 'Completed', and 'Late Return'
    SELECT car_Rental_status_id INTO v_confirmed_status FROM car_rental_status WHERE car_rental_status_description = 'Confirmed'; 
    SELECT car_Rental_status_id INTO v_ongoing_status FROM car_rental_status WHERE car_rental_status_description = 'On-going'; 
    SELECT car_Rental_status_id INTO v_completed_status FROM car_rental_status WHERE car_rental_status_description = 'Completed'; 
    SELECT car_Rental_status_id INTO v_late_return_status FROM car_rental_status WHERE car_rental_status_description = 'Late Return';

    -- Calculate total profit including penalty amount if applicable
    SELECT SUM(
            ((r.CAR_RENTAL_END_DATE - r.CAR_RENTAL_START_DATE) * c.CAR_DAILY_HIRE_RATE)
            -
            NVL(
                (SELECT NVL(MAX(DISCOUNT_AMOUNT),0) / 100 *
                    (r.CAR_RENTAL_END_DATE - r.CAR_RENTAL_START_DATE)
                    * c.CAR_DAILY_HIRE_RATE
                FROM DISCOUNT
                WHERE DISCOUNT_CODE = r.DISCOUNT_CODE
                ), 0
            )
            +
            NVL(
                (SELECT SUM(penalty_amount) FROM PENALTY WHERE CAR_RENTAL_ID = r.CAR_RENTAL_ID), 0
            )
        )
    INTO v_total_profit
    FROM CAR_RENTAL r
    JOIN CAR c ON r.CAR_REGISTRATION_PLATE_NUMBER = c.CAR_REGISTRATION_PLATE_NUMBER
    WHERE r.CAR_REGISTRATION_PLATE_NUMBER = p_car_reg 
    AND r.CAR_RENTAL_STATUS_ID IN (v_confirmed_status, v_ongoing_status, v_completed_status, v_late_return_status);

    RETURN v_total_profit;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
    WHEN OTHERS THEN
        RETURN NULL;
END;
/


--!FUNCTION 4
-- The function 'calculate_daily_hire_rate_for_car' calculates the daily hire rate for the car based on the car category, year of manufacture, option type and engine size.Then, it employs different multipliers corresponding to these criteria to determine daily rental charge. 
CREATE OR REPLACE FUNCTION calculate_daily_hire_rate_for_car(
    p_car_id IN CAR.CAR_REGISTRATION_PLATE_NUMBER%TYPE
) RETURN NUMBER IS 
    v_category_id CAR.CATEGORY_ID%TYPE;
    v_car_year_manufactured CAR.YEAR_MANUFACTURED%TYPE;
    v_category_multiplier NUMBER;
    v_engine_multiplier NUMBER;
    v_engine_size NUMBER;
    v_option_type VARCHAR2(100);
    v_option_multiplier NUMBER;
BEGIN
    -- Fetch necessary information based on car registration plate number
    SELECT c.CATEGORY_ID, c.YEAR_MANUFACTURED
    INTO v_category_id, v_car_year_manufactured
    FROM CAR c
    JOIN CAR_CATEGORY cc ON c.category_id = cc.category_id 
    WHERE c.CAR_REGISTRATION_PLATE_NUMBER = p_car_id;

    -- Fetch engine size based on car registration plate number
    SELECT e.ENGINE_SIZE
    INTO v_engine_size
    FROM ENGINE e
    JOIN MODEL_ENGINE me ON e.ENGINE_ID = me.ENGINE_ID
    JOIN MODEL m ON me.MODEL_ID = m.MODEL_ID
    JOIN CAR c ON m.MODEL_ID = c.MODEL_ID
    WHERE c.CAR_REGISTRATION_PLATE_NUMBER = p_car_id
    AND ROWNUM = 1; -- Add this condition to ensure only one row is returned

    -- Fetch option type based on car registration plate number
    SELECT od.OPTION_TYPE
    INTO v_option_type
    FROM OPTION_DESCRIPTION od
    JOIN MODEL_OPTION mo ON od.OPTION_TYPE = mo.OPTION_TYPE
    JOIN MODEL m ON mo.MODEL_ID = m.MODEL_ID
    JOIN CAR c ON m.MODEL_ID = c.MODEL_ID
    WHERE c.CAR_REGISTRATION_PLATE_NUMBER = p_car_id
    AND ROWNUM = 1; -- Add this condition to ensure only one row is returned

    -- Determine the car daily hire rate based on the category and year manufactured
    SELECT 
        CASE
            WHEN v_category_id = 'ECO' THEN
                CASE
                    WHEN v_car_year_manufactured >= 2020 THEN 5
                    ELSE 3
                END
            WHEN v_category_id = 'LUX' THEN
                CASE
                    WHEN v_car_year_manufactured >= 2020 THEN 8
                    ELSE 6.5
                END
            WHEN v_category_id = 'SUV' THEN
                CASE
                    WHEN v_car_year_manufactured >= 2020 THEN 6
                    ELSE 5
                END
            WHEN v_category_id = 'ELC' THEN
                CASE
                    WHEN v_car_year_manufactured >= 2020 THEN 7
                    ELSE 6.3
                END
            ELSE 4.5 -- Default category multiplier
        END INTO v_category_multiplier
    FROM DUAL;

    -- Determine the value of the engine multiplier
    SELECT 
        CASE
            WHEN v_engine_size = 1.4 THEN 6
            WHEN v_engine_size = 1.5 THEN 7
            WHEN v_engine_size = 1.6 THEN 8
            WHEN v_engine_size = 1.7 THEN 9
            WHEN v_engine_size = 1.8 THEN 10
            ELSE 5
        END INTO v_engine_multiplier
    FROM DUAL;

    -- Determine the value of the option multiplier
    SELECT 
        CASE
            WHEN v_option_type = 'High-end' THEN 15
            WHEN v_option_type = 'Full Option' THEN 12
            WHEN v_option_type = 'Med Option' THEN 8
            WHEN v_option_type = 'Low Option' THEN 5
            ELSE 6
        END INTO v_option_multiplier
    FROM DUAL;

    -- Calculate the car daily hire rate based on engine size and category_id
    RETURN v_engine_multiplier * v_category_multiplier + v_option_multiplier;
    EXCEPTION
    when others then return null;
END;
/



--!DML script for inserting sample data into all the tables in the database

--license
INSERT INTO License VALUES (011852469, TO_DATE('2025-12-31', 'YYYY-MM-DD'));

INSERT INTO License VALUES (040119934, TO_DATE('2026-08-1', 'YYYY-MM-DD'));

INSERT INTO License VALUES (171011973, TO_DATE('2025-05-12', 'YYYY-MM-DD'));

INSERT INTO License VALUES (012345678, TO_DATE('2024-11-28', 'YYYY-MM-DD'));

INSERT INTO License VALUES (123846254, TO_DATE('2027-06-22', 'YYYY-MM-DD'));

--customer
INSERT INTO Customer VALUES (CUST_ID_SEQ.NEXTVAL, 'John', 'Murphy', '34622937', 'john34murphy@gmail.com', 'British', 090204059, 011852469, 0);

INSERT INTO Customer VALUES (CUST_ID_SEQ.NEXTVAL, 'Ali', 'Hussain', '33326938', 'ali98hussain@gmail.com', 'Bahraini', 0891204076, 040119934, 0);

INSERT INTO Customer VALUES (CUST_ID_SEQ.NEXTVAL, 'Zahraa', 'Hasan', '39940932', 'zahraa14hasan@gmail.com', 'Bahraini', 040804786, 171011973, 0);

INSERT INTO Customer VALUES (CUST_ID_SEQ.NEXTVAL, 'Dalal', 'Jaffer', '39085611', 'Zainab@gmail.com', 'Kuwaiti', 0891204076, 012345678, 0);

INSERT INTO Customer VALUES (CUST_ID_SEQ.NEXTVAL, 'Manar', 'Qassim', '33233869', 'manar@gmail.com', 'Emarati', 030203267, 123846254, 0);

--address
INSERT INTO Address VALUES (ADDR_ID_SEQ.NEXTVAL, 'Manama', 123, 456, 'Flat', 789, 'Near Hayat Mall', 1);

INSERT INTO Address VALUES (ADDR_ID_SEQ.NEXTVAL, 'Isa Town', 213, 564, 'House', 879, 'Near Bahrain Polytechnic', 2);

INSERT INTO Address VALUES (ADDR_ID_SEQ.NEXTVAL, 'Sanabis', 765, 192, 'Flat', 23, 'Near Bahrain Airport', 3);

INSERT INTO Address VALUES (ADDR_ID_SEQ.NEXTVAL, 'Manama', 975, 305, 'Hotel', 108, 'Near Bahrain Bay', 4);

INSERT INTO Address VALUES (ADDR_ID_SEQ.NEXTVAL, 'Muharaq', 867, 152, 'Hotel', 198, 'Near Crystal Palace Hotel', 5);

--card details
INSERT INTO Card_detail VALUES (1234567891011123, 'John Ben Doe Murphy', 12, 25, 213, 1);

INSERT INTO Card_detail VALUES (6543219871011943, 'Ali Moosa Jaffer Hussain', 08, 25, 237, 2);

INSERT INTO Card_detail VALUES (1987101654343219, 'Ali Moosa Jaffer Hussain', 10, 27, 937, 2);

INSERT INTO Card_detail VALUES (9876515262022742, 'Zahra Hussain Qassim Hasan', 11, 26, 356, 3);

INSERT INTO Card_detail VALUES (4567893189643323, 'Dalal Jassim Hasan Jaffer ', 01, 27, 653, 4);

INSERT INTO Card_detail VALUES (9436987101154321, 'Manar Ali Mohsen Qassim', 05, 25, 725, 5);

--manufacturer
INSERT INTO MANUFACTURER VALUES(MANUF_ID_SEQ.NEXTVAL,'Toyota');
INSERT INTO MANUFACTURER VALUES(MANUF_ID_SEQ.NEXTVAL,'Nissan');
INSERT INTO MANUFACTURER VALUES(MANUF_ID_SEQ.NEXTVAL,'Ford');
INSERT INTO MANUFACTURER VALUES(MANUF_ID_SEQ.NEXTVAL,'Lexus');
INSERT INTO MANUFACTURER VALUES(MANUF_ID_SEQ.NEXTVAL,'Mazda');
--model
INSERT INTO MODEL VALUES(MOD_ID_SEQ.NEXTVAL,'Corolla','Regular Gasoline',5,1);
INSERT INTO MODEL VALUES(MOD_ID_SEQ.NEXTVAL,'Aurion','Super Gasoline',5,1);
INSERT INTO MODEL VALUES(MOD_ID_SEQ.NEXTVAL,'Land Cruiser','Super Gasoline',8,1);
INSERT INTO MODEL VALUES(MOD_ID_SEQ.NEXTVAL,'Micra','Regular Gasoline',8,2);
INSERT INTO MODEL VALUES(MOD_ID_SEQ.NEXTVAL,'Maxima','Regular Gasoline',5,2);
INSERT INTO MODEL VALUES(MOD_ID_SEQ.NEXTVAL,'Patrol','Super Gasoline',8,2);
INSERT INTO MODEL VALUES(MOD_ID_SEQ.NEXTVAL,'Focus','Super Gasoline',8,3);
INSERT INTO MODEL VALUES(MOD_ID_SEQ.NEXTVAL,'Fusion','Super Gasoline',9,3);
INSERT INTO MODEL VALUES(MOD_ID_SEQ.NEXTVAL,'Explorer','Super Gasoline',10,3);
INSERT INTO MODEL VALUES(MOD_ID_SEQ.NEXTVAL,'RX-350','Super Gasoline',6,4);
INSERT INTO MODEL VALUES(MOD_ID_SEQ.NEXTVAL,'CX-5','Super Gasoline',6,4);
--!option description add one more 
INSERT INTO OPTION_DESCRIPTION VALUES('Low Option','limited customization, it provides a cost-effective choice for practical transportation');
INSERT INTO OPTION_DESCRIPTION VALUES('Med Option','Offers a balanced mix of features and affordability, sitting between the base and top-tier trims');
INSERT INTO OPTION_DESCRIPTION VALUES('Full Option','Epitomizes luxury and sophistication, boasting an extensive array of premium features and cutting-edge technology');
INSERT INTO OPTION_DESCRIPTION VALUES('High-end','Epitomizes luxury and sophistication, boasting an extensive array of premium features and cutting-edge technology');
--model option
INSERT INTO MODEL_OPTION VALUES(1,'Low Option');
INSERT INTO MODEL_OPTION VALUES(1,'Med Option');
INSERT INTO MODEL_OPTION VALUES(2,'Low Option');
INSERT INTO MODEL_OPTION VALUES(3,'Full Option');
INSERT INTO MODEL_OPTION VALUES(4,'Low Option');
INSERT INTO MODEL_OPTION VALUES(5,'Med Option');
INSERT INTO MODEL_OPTION VALUES(6,'Full Option');
INSERT INTO MODEL_OPTION VALUES(7,'Full Option');
INSERT INTO MODEL_OPTION VALUES(8,'Low Option');
INSERT INTO MODEL_OPTION VALUES(9,'Med Option');
INSERT INTO MODEL_OPTION VALUES(10,'Full Option');
INSERT INTO MODEL_OPTION VALUES(11,'Med Option');
INSERT INTO MODEL_OPTION VALUES(7,'Low Option');
INSERT INTO MODEL_OPTION VALUES(5,'Full Option');
INSERT INTO MODEL_OPTION VALUES(4,'Med Option');
INSERT INTO MODEL_OPTION VALUES(9,'Full Option');
INSERT INTO MODEL_OPTION VALUES(10,'Low Option');
INSERT INTO MODEL_OPTION VALUES(11,'Low Option');
--engine
INSERT INTO ENGINE VALUES(ENG_ID_SEQ.NEXTVAL,1.4);
INSERT INTO ENGINE VALUES(ENG_ID_SEQ.NEXTVAL,1.5);
INSERT INTO ENGINE VALUES(ENG_ID_SEQ.NEXTVAL,1.6);
INSERT INTO ENGINE VALUES(ENG_ID_SEQ.NEXTVAL,1.7);
INSERT INTO ENGINE VALUES(ENG_ID_SEQ.NEXTVAL,1.8);
--model engine
INSERT INTO MODEL_ENGINE VALUES(1,3);
INSERT INTO MODEL_ENGINE VALUES(1,2);
INSERT INTO MODEL_ENGINE VALUES(3,4);
INSERT INTO MODEL_ENGINE VALUES(2,6);
INSERT INTO MODEL_ENGINE VALUES(4,3);
INSERT INTO MODEL_ENGINE VALUES(4,10);
INSERT INTO MODEL_ENGINE VALUES(5,9);
INSERT INTO MODEL_ENGINE VALUES(2,7);
INSERT INTO MODEL_ENGINE VALUES(1,7);
INSERT INTO MODEL_ENGINE VALUES(4,8);
INSERT INTO MODEL_ENGINE VALUES(3,1);
INSERT INTO MODEL_ENGINE VALUES(5,5);
INSERT INTO MODEL_ENGINE VALUES(4,11);
INSERT INTO MODEL_ENGINE VALUES(2,11);

--maintenance type
INSERT INTO MAINTENANCE_TYPE VALUES('oil', 27, 'change car''s engine oil');
INSERT INTO MAINTENANCE_TYPE VALUES('battery', 90, 'change car''s battery');
INSERT INTO MAINTENANCE_TYPE VALUES('windshield-wipers', 99.5, 'change car''s windshield wipers');
INSERT INTO MAINTENANCE_TYPE VALUES('air-filter', 75, 'change car''s air filter');
INSERT INTO MAINTENANCE_TYPE VALUES('tires', 88.5, 'change car''s tires');
INSERT INTO MAINTENANCE_TYPE VALUES('headlights', 87, 'change car''s headlights');
INSERT INTO MAINTENANCE_TYPE VALUES('regular-maintenance', 99, 'check the car');
INSERT INTO MAINTENANCE_TYPE VALUES('accident', 88, 'fix the car');

--location
INSERT INTO Location VALUES (LOC_ID_SEQ.NEXTVAL, 735, 246, 'Building', '17589996', 'Manama', '9:00 AM - 5:00 PM', 'Sunday - Thursday', 'branch1@gmail.com');

INSERT INTO Location VALUES (LOC_ID_SEQ.NEXTVAL, 863, 134, 'Building', '17784553', 'Muharaq', '9:00 AM - 5:00 PM', 'Sunday - Thursday', 'branch2@gmail.com');

INSERT INTO Location VALUES (LOC_ID_SEQ.NEXTVAL, 144, 927, 'Building', '17271123 ', 'Saar', '9:00 AM - 5:00 PM', 'Sunday - Thursday', 'branch3@gmail.com');

INSERT INTO Location VALUES (LOC_ID_SEQ.NEXTVAL, 837, 562, 'Building', '17229559 ', 'Isa Town', '9:00 AM - 5:00 PM', 'Sunday - Thursday', 'branch4@gmail.com');

INSERT INTO Location VALUES (LOC_ID_SEQ.NEXTVAL, 927, 395, 'Building', '17891465 ', 'Aali', '9:00 AM - 5:00 PM', 'Sunday - Thursday', 'branch5@gmail.com');

--employee
INSERT INTO Employee VALUES (EMP_ID_SEQ.NEXTVAL, 'David', 'Gulua', 'david@gmail.com', '37214465', 'B1', '9:00 AM - 5:00 PM', 6600, null, TO_DATE('2022-01-01', 'YYYY-MM-DD'), null, 1);

INSERT INTO Employee VALUES (EMP_ID_SEQ.NEXTVAL, 'John', 'Doe', 'john@gmail.com', '37275055', 'B2', '9:00 AM - 5:00 PM', 4500, null, TO_DATE('2022-10-12', 'YYYY-MM-DD'), 1, 2);

INSERT INTO Employee VALUES (EMP_ID_SEQ.NEXTVAL, 'Jazmin', 'Oslen', 'jazmin@gmail.com', '37415288', 'B3', '9:00 AM - 5:00 PM', 3600, null, TO_DATE('2023-12-21', 'YYYY-MM-DD'), 1, 3);

INSERT INTO Employee VALUES (EMP_ID_SEQ.NEXTVAL, 'Adrian', 'Graham', 'adrian@gmail.com', ' 37732002 ', 'B4', '9:00 AM - 5:00 PM', 5650, null, TO_DATE('2023-06-15', 'YYYY-MM-DD'), 1, 4);

INSERT INTO Employee VALUES (EMP_ID_SEQ.NEXTVAL, 'Alexis', 'Bull', 'alexis@gmail.com', '37702883', 'B5', '9:00 AM - 5:00 PM', 5000, null, TO_DATE('2024-09-10', 'YYYY-MM-DD'), 1, 5);

INSERT INTO Employee VALUES (EMP_ID_SEQ.NEXTVAL, 'Octavia', 'Skykrui', 'octavia@gmail.com', '33678080 ', 'B1', '9:00 AM - 5:00 PM', 3800, null, TO_DATE('2022-11-03', 'YYYY-MM-DD'), 2, 1);

INSERT INTO Employee VALUES (EMP_ID_SEQ.NEXTVAL, 'Ballemy', 'Enzo', 'ballemy@gmail.com', '37251531 ', 'B1', '9:00 AM - 5:00 PM', 2100, 0.2, TO_DATE('2022-01-4', 'YYYY-MM-DD'), 2, 1);

INSERT INTO Employee VALUES (EMP_ID_SEQ.NEXTVAL, 'Clark', 'Miller', 'clark@gmail.com', '37828223', 'B2', '9:00 AM - 5:00 PM', 2800, null, TO_DATE('2022-10-13', 'YYYY-MM-DD'), 2, 2);

INSERT INTO Employee VALUES (EMP_ID_SEQ.NEXTVAL, 'Kane', 'Marcus', 'kane@gmail.com', '37594242', 'B2', '9:00 AM - 5:00 PM', 2200, 0.5, TO_DATE('2022-10-13', 'YYYY-MM-DD'), 2, 2);

INSERT INTO Employee VALUES (EMP_ID_SEQ.NEXTVAL, 'Abbey', 'Pheleps', 'abbey@gmail.com', '37263000 ', 'B3', '9:00 AM - 5:00 PM', 1200, null, TO_DATE('2023-12-23', 'YYYY-MM-DD'), 3, 3);

INSERT INTO Employee VALUES (EMP_ID_SEQ.NEXTVAL, 'Aaya', 'Ahmed', 'aaya@gmail.com', '37722295', 'B3', '9:00 AM - 5:00 PM', 2000, null, TO_DATE('2023-12-25', 'YYYY-MM-DD'), 3, 3);

INSERT INTO Employee VALUES (EMP_ID_SEQ.NEXTVAL, 'Yusuf', 'Isa', 'yusuf@gmail.com', '37406446', 'B4', '9:00 AM - 5:00 PM', 2700, null, TO_DATE('2023-06-16', 'YYYY-MM-DD'), 4, 4);

INSERT INTO Employee VALUES (EMP_ID_SEQ.NEXTVAL, 'Julie', 'Reed', 'julie@gmail.com', '37244425', 'B4', '9:00 AM - 5:00 PM', 3200, 0.3, TO_DATE('2023-06-16', 'YYYY-MM-DD'), 4, 4);

INSERT INTO Employee VALUES (EMP_ID_SEQ.NEXTVAL, 'Mahir', 'Hasan', 'mahir@gmail.com', '37244425', 'B5', '9:00 AM - 5:00 PM', 3900, 0.4, TO_DATE('2024-09-10', 'YYYY-MM-DD'), 5, 5);

INSERT INTO Employee VALUES (EMP_ID_SEQ.NEXTVAL, 'Kevin', 'Feeny', 'kevin@gmail.com', '37244425', 'B5', '9:00 AM - 5:00 PM', 1900, null, TO_DATE('2024-09-10', 'YYYY-MM-DD'), 5, 5);

-- rental status 
INSERT INTO RENTAL_STATUS VALUES(RENT_STAT_SEQ.nextval,'Available');
INSERT INTO RENTAL_STATUS VALUES(RENT_STAT_SEQ.nextval,'Awaiting inspection');
INSERT INTO RENTAL_STATUS VALUES(RENT_STAT_SEQ.nextval,'Under-maintenance');
INSERT INTO RENTAL_STATUS VALUES(RENT_STAT_SEQ.nextval,'Cancelled');
INSERT INTO RENTAL_STATUS VALUES(RENT_STAT_SEQ.nextval,'Booked');

--car category 

INSERT INTO CAR_CATEGORY VALUES('ECO', 'economy','economy helps in reducing the fuel consumption');
INSERT INTO CAR_CATEGORY VALUES('LUX', 'luxury','luxury cars have high-end features and equipment');
INSERT INTO CAR_CATEGORY VALUES('SUV', 'sport utility vehicle','suv are big cars used for off-roading');
INSERT INTO CAR_CATEGORY VALUES('ELC', 'electric','quiet cars that work on battery');
INSERT INTO CAR_CATEGORY VALUES('SPT', 'sport','cars dedicate for high performance and handling');

--car

INSERT INTO CAR VALUES(23896,'24-Jul-2024',2002,'black',3457.6,25,null,'ECO',1,1,1);
INSERT INTO CAR VALUES(45378,'05-Oct-2024',2014,'dark grey',1102.0,35,null,'LUX',1,2,2);
INSERT INTO CAR VALUES(27291,'12-Mar-2026',2012,'gold',5433.8,30,null,'SUV',3,1,3);
INSERT INTO CAR VALUES(49024,'03-May-2025',2020,'blue',3542.0,20,null,'ELC',4,1,4);
INSERT INTO CAR VALUES(87987,'24-Jul-2024',2002,'black',8987.2,32,null,'SPT',5,1,5);
INSERT INTO CAR VALUES(36476,'15-Dec-2027',2002,'red',4564.9,37,null,'SUV',6,1,1);
INSERT INTO CAR VALUES(79557,'17-Nov-2026',2002,'yellow',7874.5,22.2,null,'ECO',1,3,2);
INSERT INTO CAR VALUES(26178,'25-Feb-2027',2002,'white',2574.8,40.5,null,'LUX',8,1,3);
INSERT INTO CAR  VALUES(87953,'10-Jan-2026',2002,'light grey',4686.9,29.9,null,'ELC',9,1,4);
INSERT INTO CAR VALUES(56324,'22-Aug-2027',2002,'white',9125.4,23.5,null,'SPT',10,1,5);
INSERT INTO CAR VALUES(347999,'22-Aug-2027',2002,'white',9125.4,23.5,null,'SPT',10,1,5);
INSERT INTO CAR VALUES(878787,'22-Aug-2027',2002,'white',9125.4,23.5,null,'SPT',10,1,5);

DECLARE
   v_penalty NUMBER;
BEGIN
   FOR car_rec IN (SELECT CAR_REGISTRATION_PLATE_NUMBER FROM CAR) LOOP
      v_penalty := calculate_daily_late_return_penalty_for_car(car_rec.CAR_REGISTRATION_PLATE_NUMBER);
    --   DBMS_OUTPUT.PUT_LINE('Calculated Penalty Rate for Car ' || car_rec.CAR_REGISTRATION_PLATE_NUMBER || ': ' || v_penalty);
      
      UPDATE CAR
      SET car_daily_late_return_panelty = v_penalty
      WHERE CAR_REGISTRATION_PLATE_NUMBER = car_rec.CAR_REGISTRATION_PLATE_NUMBER;
   END LOOP;
   
   COMMIT;
END;
/

--inspection
INSERT INTO CAR_INSPECTION VALUES(CAR_INSP_ID_SEQ.NEXTVAL,'09-Mar-2024','Passed','Car has passed',23896);
INSERT INTO CAR_INSPECTION VALUES(CAR_INSP_ID_SEQ.NEXTVAL,'11-Feb-2024','Passed','Car has passed',45378);
INSERT INTO CAR_INSPECTION VALUES(CAR_INSP_ID_SEQ.NEXTVAL,'19-Apr-2024','Passed','Car has passed',27291);
INSERT INTO CAR_INSPECTION VALUES(CAR_INSP_ID_SEQ.NEXTVAL,'28-Dec-2023','Passed','Car has passed',49024);
INSERT INTO CAR_INSPECTION VALUES(CAR_INSP_ID_SEQ.NEXTVAL,'17-Feb-2023','Passed','Car has passed',87987);
INSERT INTO CAR_INSPECTION VALUES(CAR_INSP_ID_SEQ.NEXTVAL,'18-Feb-2024','Passed','Car has passed',87987);
INSERT INTO CAR_INSPECTION VALUES(CAR_INSP_ID_SEQ.NEXTVAL,'19-Jun-2022','Passed','Car has passed',36476);
INSERT INTO CAR_INSPECTION VALUES(CAR_INSP_ID_SEQ.NEXTVAL,'08-Jul-2023','Passed','Car has passed',79557);
INSERT INTO CAR_INSPECTION VALUES(CAR_INSP_ID_SEQ.NEXTVAL,'14-Jan-2024','Passed','Car has passed',26178);
INSERT INTO CAR_INSPECTION VALUES(CAR_INSP_ID_SEQ.NEXTVAL,'24-Mar-2022','Passed','Car has passed',87953);
INSERT INTO CAR_INSPECTION VALUES(CAR_INSP_ID_SEQ.NEXTVAL,'01-Apr-2024','Passed','Car has passed',56324);

--accident
INSERT INTO ACCIDENT_REPORT VALUES(ACC_REP_ID_SEQ.nextval, '05-Mar-2024', 'driver merged into lane causing an accident affecting the back bumper',23896);
INSERT INTO ACCIDENT_REPORT VALUES(ACC_REP_ID_SEQ.nextval, '13-Dec-2023', 'driver reversed into a car causing damage to the back bumper',49024);
INSERT INTO ACCIDENT_REPORT VALUES(ACC_REP_ID_SEQ.nextval, '17-Nov-2023', 'driver rear-ended car causing damage to the front bumper',36476);
INSERT INTO ACCIDENT_REPORT VALUES(ACC_REP_ID_SEQ.nextval, '06-Jul-2023', 'driver reversed into a pole causing damage to the back bumper',79557);
INSERT INTO ACCIDENT_REPORT VALUES(ACC_REP_ID_SEQ.nextval, '14-Oct-2023', 'driver scratched car''s paint',45378);

--maintenance
INSERT INTO MAINTENANCE VALUES(MAINT_ID_SEQ.nextval,'03-Jan-2024','03-Jan-2024','04-Jan-2025',79557,'oil');
INSERT INTO MAINTENANCE VALUES(MAINT_ID_SEQ.nextval,'30-Jan-2024','03-Feb-2024','08-Feb-2025',36476,'battery');
INSERT INTO MAINTENANCE VALUES(MAINT_ID_SEQ.nextval,'24-Oct-2023','30-Oct-2023','13-Nov-2024',56324,'windshield-wipers');
INSERT INTO MAINTENANCE VALUES(MAINT_ID_SEQ.nextval,'13-Apr-2024','15-Apr-2024','17-Apr-2025',87987,'air-filter');
INSERT INTO MAINTENANCE VALUES(MAINT_ID_SEQ.nextval,'27-Feb-2024','28-Feb-2024','03-Mar-2025',26178,'tires');
INSERT INTO MAINTENANCE VALUES(MAINT_ID_SEQ.nextval,'05-Mar-2024','06-Mar-2024','09-Mar-2025',49024,'headlights');

--insurance company
INSERT INTO INSURANCE_COMPANY VALUES(INSU_COMP_ID_SEQ.NEXTVAL,'Alkhaleej','17853578','contact@alkhaleej.bh');
INSERT INTO INSURANCE_COMPANY VALUES(INSU_COMP_ID_SEQ.NEXTVAL,'New Vision','17632506','help@newvision.co');
INSERT INTO INSURANCE_COMPANY VALUES(INSU_COMP_ID_SEQ.NEXTVAL,'Al-Watani','17501296','contactus@watani.bh');
INSERT INTO INSURANCE_COMPANY VALUES(INSU_COMP_ID_SEQ.NEXTVAL,'Awal','17689234','contact@awal.bh');
INSERT INTO INSURANCE_COMPANY VALUES(INSU_COMP_ID_SEQ.NEXTVAL,'Albilaj','17532050','contact@albilaj.bh');

--insurance
INSERT INTO INSURANCE VALUES('collision', 700,'covers for any damages regardless of who''s at fault in the accident', INSU_ID_SEQ.nextval,1);
INSERT INTO INSURANCE VALUES('roadside assistance', 856,'covers services for towing or changing tire for car breakdown', INSU_ID_SEQ.nextval,2);
INSERT INTO INSURANCE VALUES('injury protection', 790,'covers medical costs for the driver and passanger in an accident', INSU_ID_SEQ.nextval,3);
INSERT INTO INSURANCE VALUES('uninsured motorist', 950,'covers medical fees and car costs for uninsured driver', INSU_ID_SEQ.nextval,4);
INSERT INTO INSURANCE VALUES('new car replacement', 999,'provides new car as a replacement, if any issues occur', INSU_ID_SEQ.nextval,5);

--car insurance
INSERT INTO CAR_INSURANCE VALUES('02-Dec-2022', '01-Dec-2026',45378,1);
INSERT INTO CAR_INSURANCE VALUES('05-Mar-2021', '04-Mar-2025',79557,2);
INSERT INTO CAR_INSURANCE VALUES('16-Jul-2020', '15-Jul-2024',36476,3);
INSERT INTO CAR_INSURANCE VALUES('20-May-2021', '19-May-2025',49024,4);
INSERT INTO CAR_INSURANCE VALUES('10-Oct-2022', '09-Oct-2026',23896,5);
INSERT INTO CAR_INSURANCE VALUES('05-Dec-2022', '04-Dec-2026',27291,1);
INSERT INTO CAR_INSURANCE VALUES('10-Aug-2021', '09-Aug-2025',87987,2);
INSERT INTO CAR_INSURANCE VALUES('20-Sep-2020', '19-Sep-2024',26178,3);
INSERT INTO CAR_INSURANCE VALUES('13-Mar-2021', '12-Mar-2025',87953,4);
INSERT INTO CAR_INSURANCE VALUES('23-Jan-2022', '22-Jan-2026',56324,5);

--discount
INSERT INTO Discount VALUES ('DISC123', 'Spring Sale', 20, TO_DATE('2024-03-20', 'YYYY-MM-DD'), TO_DATE('2024-04-15', 'YYYY-MM-DD'));
INSERT INTO Discount VALUES ('G7XKSPsH', 'Mothers Day', 25, TO_DATE('2024-03-19', 'YYYY-MM-DD'), TO_DATE('2024-04-19', 'YYYY-MM-DD'));
INSERT INTO Discount VALUES ('PsxW5JBs', 'National Day', 40, TO_DATE('2023-12-01', 'YYYY-MM-DD'), TO_DATE('2023-12-30', 'YYYY-MM-DD'));
INSERT INTO Discount VALUES ('zLmads49', 'Summer Sale', 30, TO_DATE('2022-08-01', 'YYYY-MM-DD'), TO_DATE('2022-08-30', 'YYYY-MM-DD'));
INSERT INTO Discount VALUES ('BMg6X0jw', 'Autumn Sale', 16.5, TO_DATE('2022-10-18', 'YYYY-MM-DD'), TO_DATE('2022-11-20', 'YYYY-MM-DD'));

--extra equip
INSERT INTO Extra_Equipment VALUES (EXT_EQUIP_SEQ.NEXTVAL, 'Child Safety Seat', 'To keep young passengers safe and secure while
traveling.', 6, 100);
INSERT INTO Extra_Equipment VALUES (EXT_EQUIP_SEQ.NEXTVAL, 'Roof Rack', 'Provides additional storage space for luggage, sports equipment,
or other bulky items.', 10, 80);
INSERT INTO Extra_Equipment VALUES (EXT_EQUIP_SEQ.NEXTVAL, 'Portable Cooler', 'Keeps drinks and snacks cool during the journey.', 8, 50);
INSERT INTO Extra_Equipment VALUES (EXT_EQUIP_SEQ.NEXTVAL, 'Roadside Emergency Kit', 'Includes essential tools and supplies for handling
roadside emergencies,such as jumper cables and a flashlight.', 5, 95);
INSERT INTO Extra_Equipment VALUES (EXT_EQUIP_SEQ.NEXTVAL, 'Dash Cam', 'Records video footage of the road ahead for added security and 
peace of mind.',6.5, 85);

--car rental status 
INSERT INTO CAR_RENTAL_STATUS VALUES(CAR_RENT_STAT_SEQ.nextval,'Confirmed');
INSERT INTO CAR_RENTAL_STATUS VALUES(CAR_RENT_STAT_SEQ.nextval,'On-going');
INSERT INTO CAR_RENTAL_STATUS VALUES(CAR_RENT_STAT_SEQ.nextval,'Cancelled');
INSERT INTO CAR_RENTAL_STATUS VALUES(CAR_RENT_STAT_SEQ.nextval,'Completed');
INSERT INTO CAR_RENTAL_STATUS VALUES(CAR_RENT_STAT_SEQ.nextval,'Late Return');
INSERT INTO CAR_RENTAL_STATUS VALUES(CAR_RENT_STAT_SEQ.nextval,'Pending');


--car rental
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'21-Dec-2023','23-Dec-2023','23-Dec-2023',23896,1,'PsxW5JBs',7,4);
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'15-May-2024','20-Jun-2024',null,23896,1,'PsxW5JBs',7,4);
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'29-Mar-2024','6-Apr-2024',NULL,45378,2,'DISC123',9,NULL);
UPDATE CAR_RENTAL SET CAR_RENTAL_RETURN_DATE='10-Apr-2024' WHERE CAR_RENTAL_ID=3;
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'14-Apr-2021','20-Apr-2021','20-Apr-2021',27291,3,null,10,4);
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval, '11-Nov-2023','22-Nov-2023',null,49024,4,null,4,null);
UPDATE CAR_RENTAL SET CAR_RENTAL_RETURN_DATE='25-Nov-2023' WHERE CAR_RENTAL_ID=5;
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'09-Jan-2022','12-Jan-2022','12-Jan-2022',87987,5,null,5,4);
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval, '18-Feb-2023','20-Feb-2023',null,36476,1,null,7,null);
UPDATE CAR_RENTAL SET CAR_RENTAL_RETURN_DATE='22-Feb-2023' WHERE CAR_RENTAL_ID=7;
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval, '10-Jun-2023','13-Jun-2023','13-Jun-2023',79557,2,null,8,4);
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'23-Aug-2022','26-Aug-2022',null,26178,3,'zLmads49',10,6);
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'11-Nov-2023','22-Nov-2023',null,87953,4,null,13,null);
UPDATE CAR_RENTAL SET CAR_RENTAL_RETURN_DATE='25-Nov-2023' WHERE CAR_RENTAL_ID=10;
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval, '07-Jun-2022','13-Jun-2022',null,56324,5,null,15,null);
UPDATE CAR_RENTAL SET CAR_RENTAL_RETURN_DATE='14-Jun-2022' WHERE CAR_RENTAL_ID=11;
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'25-Dec-2022','27-Dec-2022','27-Dec-2022',23896,1,null,6,4);
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'21-Nov-2023','25-Nov-2023',null,45378,2,null,2,null);
UPDATE CAR_RENTAL SET CAR_RENTAL_RETURN_DATE='26-Nov-2023' WHERE CAR_RENTAL_ID=13;
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'18-Jun-2022','19-Jun-2022','19-Jun-2022',27291,3,null,3,4);
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'25-Jun-2023','30-Jun-2023','30-Jun-2023',49024,4,null,13,4);
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval, '05-Aug-2022','10-Aug-2022',null,87987,5,'zLmads49',14,null);
UPDATE CAR_RENTAL SET CAR_RENTAL_RETURN_DATE='11-Aug-2022' WHERE CAR_RENTAL_ID=16;
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'06-Nov-2022','11-Nov-2022','11-Nov-2023',36476,1,null,7,4);
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval, '20-Jun-2022','26-Jun-2022',null,79557,2,null,9,null);
UPDATE CAR_RENTAL SET CAR_RENTAL_RETURN_DATE='28-Jun-2022' WHERE CAR_RENTAL_ID=18;
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'22-Apr-2021','28-Aug-2022','28-Aug-2022',26178,3,'zLmads49',3,4);
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval, '01-Feb-2024','6-Feb-2024',null,87953,4,null,12,null);
UPDATE CAR_RENTAL SET CAR_RENTAL_RETURN_DATE='10-Feb-2024' WHERE CAR_RENTAL_ID=20;
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'18-Mar-2024','23-Mar-2024','23-Mar-2024',56324,5,null,14,4);
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval, '16-Mar-2022','20-Mar-2022',null,23896,1,null,6,null);
UPDATE CAR_RENTAL SET CAR_RENTAL_RETURN_DATE='25-Mar-2022' WHERE CAR_RENTAL_ID=22;
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval, '01-Apr-2022','12-Apr-2022',null,23896,1,null,6,6);
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'16-Mar-2024','20-Mar-2024',null,23896,1,null,6,null);
UPDATE CAR_RENTAL SET CAR_RENTAL_RETURN_DATE='25-Mar-2024' WHERE CAR_RENTAL_ID=24;
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'21-Jan-2024','26-Jan-2024',null,23896,1,null,6,6); 
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'02-Jul-2022','16-Jul-2022',null, 79557,2,null,8,null);
UPDATE CAR_RENTAL SET CAR_RENTAL_RETURN_DATE='01-Aug-2022' WHERE CAR_RENTAL_ID=26;
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'20-Jun-2023','26-Jun-2023','26-Jun-2023',79557,2,null,9,4); 
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'20-Feb-2023','25-Feb-2023','25-Feb-2023', 79557,2,null,8,4);
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'20-Jun-2022','26-Jun-2022',null,79557,2,null,9,null);
UPDATE CAR_RENTAL SET CAR_RENTAL_RETURN_DATE='28-Jun-2022' WHERE CAR_RENTAL_ID=29;
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'18-Mar-2023','19-Mar-2023','19-Mar-2023', 27291,3,null,10,4);
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'18-May-2023','19-May-2023','19-May-2023',27291,3,null,3,4); 
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'18-Jun-2023','19-Jun-2023','19-Jun-2023', 27291,3,null,10,4);
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'01-Feb-2023','06-Feb-2023',null, 87953,4,null,13,null);
UPDATE CAR_RENTAL SET CAR_RENTAL_RETURN_DATE='16-Feb-2023' WHERE CAR_RENTAL_ID=33;
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'17-Feb-2024','19-Feb-2024',null,87953,4,null,12,null); 
UPDATE CAR_RENTAL SET CAR_RENTAL_RETURN_DATE='19-Feb-2024' WHERE CAR_RENTAL_ID=34;
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'10-Mar-2024','16-Mar-2024','16-Mar-2024', 87953,4,null,13,4);
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'01-Apr-2024','20-Apr-2024','20-Apr-2024', 87953,4,null,13,4);
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'22-Apr-2024','26-Apr-2024',null,87953,4,null,12,null); 
UPDATE CAR_RENTAL SET CAR_RENTAL_RETURN_DATE='1-May-2024' WHERE CAR_RENTAL_ID=37;
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'05-Apr-2023','10-Apr-2023',null, 87987,5,null,5,4);
UPDATE CAR_RENTAL SET CAR_RENTAL_RETURN_DATE='11-Apr-2023' WHERE CAR_RENTAL_ID=38;
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'15-Sep-2023','21-Sep-2023',null,87987,5,'zLmads49',14,null);
UPDATE CAR_RENTAL SET CAR_RENTAL_RETURN_DATE='29-Sep-2023' WHERE CAR_RENTAL_ID=39;
INSERT INTO CAR_RENTAL VALUES(CAR_RNT_ID_SEQ.nextval,'28-Jun-2022','29-Jun-2022',null,23896,1,'PsxW5JBs',7,null);



--payment
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'cash','21-Dec-2023','Success',1);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'apple pay','29-Mar-2024','Success',2);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'credit card','14-Apr-2021','Success',3);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'paypal','11-Nov-2023','Success',4);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'cash','09-Jan-2022','Success',5);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'taby','18-Feb-2023','Success',6);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'apple pay','10-Jun-2023','Success',7);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'debit card','23-Aug-2022','Rejected',8);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'visa card','11-Nov-2023','Success',9);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'cash','07-Jun-2022','Success',10);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'cash','25-Dec-2022','Success',11);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'cash','21-Nov-2023','Success',12);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'cash','18-Jun-2022','Success',13);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'credit card','25-Jun-2023','Success',14);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'credit card','05-Aug-2022','Success',15);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'paypal','06-Nov-2022','Success',16);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'cash','20-Jun-2022','Success',17);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'apple pay','22-Apr-2021','Success',18);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'apple pay','01-Feb-2024','Success',19);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'visa card','18-Mar-2024','Success',20);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'visa card','16-Mar-2024','Success',21);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'visa card','01-Apr-2022','Success',22);
--new location 1
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'visa card', '16-Mar-2022','Success',23);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'paypal', '21-Jan-2024','Rejected',24);
--new location 2
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'visa card', '02-Jul-2022', 'Success',25);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'paypal', '20-Jun-2023', 'Success',26);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'credit card', '20-Feb-2023', 'Success',27);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'paypal', '20-Jun-2022', 'Success',28);
-- new location 3
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'paypal', '18-Mar-2023', 'Success',29);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'credit card', '18-May-2023','Success',30); 
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'paypal','18-Jun-2023', 'Success',31);
-- new location 4
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'paypal', '01-Feb-2023', 'Success',32);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'visa card', '17-Feb-2024', 'Success',33);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'paypal', '10-Mar-2024','Success',34);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'visa card',  '01-Apr-2024', 'Success',35);
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'credit card', '22-Apr-2024', 'Success',36);
-- new location 5
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'credit card', '05-Apr-2023','Success',37); 
INSERT INTO PAYMENT VALUES(PAY_ID_SEQ.NEXTVAL,'paypal','15-Sep-2023','Success',38);

--extra rental
INSERT INTO Extra_Rental VALUES (2, 1, 1);
INSERT INTO Extra_Rental VALUES (1, 4, 4);
INSERT INTO Extra_Rental VALUES (1, 5, 5);
INSERT INTO Extra_Rental VALUES (1, 11, 4);
INSERT INTO Extra_Rental VALUES (1, 12, 3);
INSERT INTO Extra_Rental VALUES (1, 13, 1);
INSERT INTO Extra_Rental VALUES (1, 29, 1);
INSERT INTO Extra_Rental VALUES (1, 35, 2);
INSERT INTO Extra_Rental VALUES (1, 37, 4);
INSERT INTO Extra_Rental VALUES (1, 38, 3);

--rental review
INSERT INTO RENTAL_REVIEW VALUES(RENT_REV_ID_SEQ.NEXTVAL,'23-Dec-2023',5,'Good',1);
INSERT INTO RENTAL_REVIEW VALUES(RENT_REV_ID_SEQ.NEXTVAL,'11-Apr-2024',0,'Bad Service!!',2);
INSERT INTO RENTAL_REVIEW VALUES(RENT_REV_ID_SEQ.NEXTVAL,'21-Apr-2021',10,'Excellent',3);
INSERT INTO RENTAL_REVIEW VALUES(RENT_REV_ID_SEQ.NEXTVAL,'27-Nov-2023',6,'Fair',4);
INSERT INTO RENTAL_REVIEW VALUES(RENT_REV_ID_SEQ.NEXTVAL,'21-Jan-2022',4,'Not that good',5);
INSERT INTO RENTAL_REVIEW VALUES(RENT_REV_ID_SEQ.NEXTVAL,'24-Feb-2023',4,'Not that good!',6);
INSERT INTO RENTAL_REVIEW VALUES(RENT_REV_ID_SEQ.NEXTVAL,'17-June-2023',8,'Good service',7);
INSERT INTO RENTAL_REVIEW VALUES(RENT_REV_ID_SEQ.NEXTVAL,'26-Nov-2023',10,'Outstanding service',9);
INSERT INTO RENTAL_REVIEW VALUES(RENT_REV_ID_SEQ.NEXTVAL,'15-Jun-2022',10,'The best car rental company in the region',10);
INSERT INTO RENTAL_REVIEW VALUES(RENT_REV_ID_SEQ.NEXTVAL,'27-Dec-2022',0,'Bad Experience!!',11);
INSERT INTO RENTAL_REVIEW VALUES(RENT_REV_ID_SEQ.NEXTVAL,'27-Nov-2023',10,'Outstanding service!',12);
INSERT INTO RENTAL_REVIEW VALUES(RENT_REV_ID_SEQ.NEXTVAL,'19-Jun-2022',7,'Good service',13);
INSERT INTO RENTAL_REVIEW VALUES(RENT_REV_ID_SEQ.NEXTVAL,'01-Jul-2023',7,'Overall satisfied',14);
INSERT INTO RENTAL_REVIEW VALUES(RENT_REV_ID_SEQ.NEXTVAL,'12-Aug-2022',1,'The WORST company in the region!',15);
INSERT INTO RENTAL_REVIEW VALUES(RENT_REV_ID_SEQ.NEXTVAL,'12-Nov-2022',9,'Good Company',16);
INSERT INTO RENTAL_REVIEW VALUES(RENT_REV_ID_SEQ.NEXTVAL,'29-Jun-2022',5,'Not bad, can be better',17);
INSERT INTO RENTAL_REVIEW VALUES(RENT_REV_ID_SEQ.NEXTVAL,'28-Aug-2022',3,'Not that good',18);
INSERT INTO RENTAL_REVIEW VALUES(RENT_REV_ID_SEQ.NEXTVAL,'11-Feb-2024',9,'Excellent!',19);
INSERT INTO RENTAL_REVIEW VALUES(RENT_REV_ID_SEQ.NEXTVAL,'25-Mar-2024',10,'Outstanding company!',20);


--!DDL script for creating views
--!A view that shows the most popular car model by location
CREATE OR REPLACE VIEW MOST_POPULAR_MODEL_VU AS
SELECT
    LOCATION_ID,
    LOCATION_CITY,
    MOST_POPULAR_MODEL,
    RENTAL_COUNT
FROM
    (
    SELECT
        L.LOCATION_ID,
        L.LOCATION_CITY,
        M.MODEL_NAME AS MOST_POPULAR_MODEL,
        RENTAL_COUNT,
        ROW_NUMBER() OVER (PARTITION BY L.LOCATION_ID ORDER BY RENTAL_COUNT DESC) AS RN
    FROM
        (
        SELECT
            C.LOCATION_ID,
            M.MODEL_NAME,
            COUNT(*) AS RENTAL_COUNT
        FROM
            CAR_RENTAL CR
        JOIN
            CAR C ON CR.CAR_REGISTRATION_PLATE_NUMBER = C.CAR_REGISTRATION_PLATE_NUMBER
        JOIN
            MODEL M ON C.MODEL_ID = M.MODEL_ID
        JOIN
            LOCATION L ON C.LOCATION_ID = L.LOCATION_ID
        GROUP BY
            C.LOCATION_ID, M.MODEL_NAME
        ) max_rental_count
    JOIN
        MODEL M ON max_rental_count.MODEL_NAME = M.MODEL_NAME
    JOIN
        LOCATION L ON max_rental_count.LOCATION_ID = L.LOCATION_ID
    ) ranked_models
WHERE RN = 1;

select * from MOST_POPULAR_MODEL_VU;


--!!!!! Solution 2
CREATE OR REPLACE VIEW MOST_POPULAR_MODEL_VU AS
SELECT
    'The most popular car model in ' ||
    LOCATION_CITY || ' is ' ||
    MOST_POPULAR_MODEL || ', which was rented ' ||
    RENTAL_COUNT || ' times.' AS POPULAR_MODEL_INFO
FROM
    (
    SELECT
        L.LOCATION_ID,
        L.LOCATION_CITY,
        M.MODEL_NAME AS MOST_POPULAR_MODEL,
        RENTAL_COUNT,
        ROW_NUMBER() OVER (PARTITION BY L.LOCATION_ID ORDER BY RENTAL_COUNT DESC) AS RN
    FROM
        (
        SELECT
            C.LOCATION_ID,
            M.MODEL_NAME,
            COUNT(*) AS RENTAL_COUNT
        FROM
            CAR_RENTAL CR
        JOIN
            CAR C ON CR.CAR_REGISTRATION_PLATE_NUMBER = C.CAR_REGISTRATION_PLATE_NUMBER
        JOIN
            MODEL M ON C.MODEL_ID = M.MODEL_ID
        JOIN
            LOCATION L ON C.LOCATION_ID = L.LOCATION_ID
        GROUP BY
            C.LOCATION_ID, M.MODEL_NAME
        ) max_rental_count
    JOIN
        MODEL M ON max_rental_count.MODEL_NAME = M.MODEL_NAME
    JOIN
        LOCATION L ON max_rental_count.LOCATION_ID = L.LOCATION_ID
    ) ranked_models
WHERE RN = 1;

 SELECT * FROM MOST_POPULAR_MODEL_VU;


--!A read-only view that shows the total rental amounts at each location for the month of June 2022. Total amount earned in June 2022
CREATE OR REPLACE VIEW TOT_RENT_AMT_VU AS
SELECT
    L.LOCATION_ID,
    L.LOCATION_CITY,
    TO_CHAR(R.CAR_RENTAL_START_DATE, 'YYYY-MM') AS RENTAL_MONTH,
    SUM((R.CAR_RENTAL_END_DATE - R.CAR_RENTAL_START_DATE) * C.CAR_DAILY_HIRE_RATE) AS TOTAL_RENTAL_AMOUNT,
    SUM(
        NVL((SELECT SUM(PENALTY_AMOUNT)
             FROM PENALTY P
             WHERE P.CAR_RENTAL_ID = R.CAR_RENTAL_ID
               AND R.CAR_RENTAL_RETURN_DATE > R.CAR_RENTAL_END_DATE), 0)
    ) AS TOTAL_PENALTY_AMOUNT,
    SUM(
        NVL((SELECT DISCOUNT_AMOUNT / 100 *
                    (R.CAR_RENTAL_END_DATE - R.CAR_RENTAL_START_DATE) * C.CAR_DAILY_HIRE_RATE
             FROM DISCOUNT D
             WHERE D.DISCOUNT_CODE = R.DISCOUNT_CODE), 0)
    ) AS TOTAL_DISCOUNT_AMOUNT,
    SUM(
        NVL((SELECT SUM(ER.QUANTITY * EE.EQUIPMENT_DAILY_RENTAL_PRICE * (R.CAR_RENTAL_END_DATE - R.CAR_RENTAL_START_DATE))
             FROM EXTRA_EQUIPMENT EE
             JOIN EXTRA_RENTAL ER ON EE.EQUIPMENT_ID = ER.EQUIPMENT_ID
             WHERE ER.CAR_RENTAL_ID = R.CAR_RENTAL_ID), 0)
    ) AS TOTAL_EQUIPMENT_AMOUNT,
    SUM(
        (R.CAR_RENTAL_END_DATE - R.CAR_RENTAL_START_DATE) * C.CAR_DAILY_HIRE_RATE +
        NVL((SELECT SUM(PENALTY_AMOUNT)
             FROM PENALTY P
             WHERE P.CAR_RENTAL_ID = R.CAR_RENTAL_ID
               AND R.CAR_RENTAL_RETURN_DATE > R.CAR_RENTAL_END_DATE), 0) -
        NVL((SELECT DISCOUNT_AMOUNT / 100 *
                    (R.CAR_RENTAL_END_DATE - R.CAR_RENTAL_START_DATE) * C.CAR_DAILY_HIRE_RATE
             FROM DISCOUNT D
             WHERE D.DISCOUNT_CODE = R.DISCOUNT_CODE), 0) +
        NVL((SELECT SUM(ER.QUANTITY * EE.EQUIPMENT_DAILY_RENTAL_PRICE * (R.CAR_RENTAL_END_DATE - R.CAR_RENTAL_START_DATE))
             FROM EXTRA_EQUIPMENT EE
             JOIN EXTRA_RENTAL ER ON EE.EQUIPMENT_ID = ER.EQUIPMENT_ID
             WHERE ER.CAR_RENTAL_ID = R.CAR_RENTAL_ID), 0)
    ) AS TOTAL_RENTAL_AMOUNT_WITH_ADDITIONS
FROM
    CAR_RENTAL R,
    CAR C,
    LOCATION L
WHERE
    R.CAR_REGISTRATION_PLATE_NUMBER = C.CAR_REGISTRATION_PLATE_NUMBER
    AND C.LOCATION_ID = L.LOCATION_ID
    AND TO_CHAR(R.CAR_RENTAL_START_DATE, 'YYYY-MM') = '2022-06'
GROUP BY
    L.LOCATION_ID,
    L.LOCATION_CITY,
    TO_CHAR(R.CAR_RENTAL_START_DATE, 'YYYY-MM');



SELECT * FROM TOT_RENT_AMT_VU;


--!PL/SQL script for creating procedures.
--!PROCEDURE 1
-- The procedure 'FindTopSellingModels' will display the top 3 selling models based on a specified year. IT will take year as parameter and sets the start and end date based on it. Then it retrieves data about rental counts made for each model and its total revenue. After that it displays the top 3 models in descending order with their location and total revenue. If there were fewer models (less than 3) rented in that specified year, it will provide a message indicating the actual count of rented models after displaying models' information
CREATE OR REPLACE PROCEDURE FindTopSellingModels (
   p_year IN NUMBER
)
IS
   -- Define a record type for model details
   TYPE ModelRecType IS RECORD (
      model_name           VARCHAR2(100),
      total_rentals        NUMBER,
      total_revenue        NUMBER,
      location_city        VARCHAR2(100),
      avg_rental_duration  NUMBER,
      min_rental_duration  NUMBER,
      max_rental_duration  NUMBER
   );
   
   -- Declare a variable of the record type
   model_rec ModelRecType;

   startDate DATE;
   endDate DATE;
   v_count NUMBER := 0;
   v_confirmed_status NUMBER;
   v_ongoing_status NUMBER;
   v_completed_status NUMBER;
   v_late_return_status NUMBER;

BEGIN
   -- Set the start and end dates based on the provided year
   startDate := TO_DATE(p_year || '-01-01', 'YYYY-MM-DD');
   endDate := TO_DATE(p_year || '-12-31', 'YYYY-MM-DD');

   -- Retrieve car rental status IDs
   SELECT car_rental_status_id INTO v_confirmed_status FROM car_rental_status WHERE car_rental_status_description = 'Confirmed';
   SELECT car_rental_status_id INTO v_ongoing_status FROM car_rental_status WHERE car_rental_status_description = 'On-going';
   SELECT car_rental_status_id INTO v_completed_status FROM car_rental_status WHERE car_rental_status_description = 'Completed';
   SELECT car_rental_status_id INTO v_late_return_status FROM car_rental_status WHERE car_rental_status_description = 'Late Return';

   FOR rec IN (
       SELECT
           (SELECT model_name FROM model WHERE model_id = c.model_id) AS model_name,
           COUNT(r.car_registration_plate_number) AS total_rentals,
           SUM(
               (r.car_rental_end_date - r.car_rental_start_date) * c.car_daily_hire_rate
               - NVL(
                   (SELECT discount_amount / 100 * (r.car_rental_end_date - r.car_rental_start_date) * c.car_daily_hire_rate
                    FROM discount
                    WHERE discount_code = r.discount_code), 0
               )
               + NVL(
                   (SELECT SUM(penalty_amount) FROM penalty WHERE car_rental_id = r.car_rental_id), 0
               )
           ) AS total_revenue,
           (SELECT location_city FROM location WHERE location_id = c.location_id) AS location_city,
           AVG(r.car_rental_end_date - r.car_rental_start_date) AS avg_rental_duration,
           MIN(r.car_rental_end_date - r.car_rental_start_date) AS min_rental_duration,
           MAX(r.car_rental_end_date - r.car_rental_start_date) AS max_rental_duration
       FROM
           car_rental r,
           car c
       WHERE
           r.car_registration_plate_number = c.car_registration_plate_number
           AND r.car_rental_start_date BETWEEN startDate AND endDate
           AND r.car_rental_status_id IN (v_confirmed_status, v_ongoing_status, v_completed_status, v_late_return_status)
       GROUP BY
           c.model_id, c.location_id
       ORDER BY
           total_revenue DESC
   ) LOOP
       -- Populate the record variable with the current row's data
       model_rec.model_name := rec.model_name;
       model_rec.total_rentals := rec.total_rentals;
       model_rec.total_revenue := NVL(rec.total_revenue, 0);
       model_rec.location_city := rec.location_city;
       model_rec.avg_rental_duration := ROUND(rec.avg_rental_duration, 2);
       model_rec.min_rental_duration := ROUND(rec.min_rental_duration, 2);
       model_rec.max_rental_duration := ROUND(rec.max_rental_duration, 2);

       v_count := v_count + 1;

       -- Print or do something with the data
       DBMS_OUTPUT.PUT_LINE('Model Name: ' || model_rec.model_name);
       DBMS_OUTPUT.PUT_LINE('Total Rentals: ' || model_rec.total_rentals);
       DBMS_OUTPUT.PUT_LINE('Total Revenue: ' || model_rec.total_revenue);
       DBMS_OUTPUT.PUT_LINE('Location City: ' || model_rec.location_city);
       DBMS_OUTPUT.PUT_LINE('Average Rental Duration: ' || model_rec.avg_rental_duration || ' days');
       DBMS_OUTPUT.PUT_LINE('Minimum Rental Duration: ' || model_rec.min_rental_duration || ' days');
       DBMS_OUTPUT.PUT_LINE('Maximum Rental Duration: ' || model_rec.max_rental_duration || ' days');
       DBMS_OUTPUT.PUT_LINE('-------------------------');

       -- Exit the loop after processing the top 3 models
       EXIT WHEN v_count >= 3;
   END LOOP;

   -- If fewer than 3 models were found, display a message
   IF v_count < 3 THEN
       DBMS_OUTPUT.PUT_LINE('There were only ' || v_count || ' models rented in ' || p_year);
   END IF;

   EXCEPTION
   WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('Error: '||SQLERRM);

END;
/

--!PROCEDURE 2
-- The procedure 'FindTopCustomers' will display the top 3 customers based on a specified car category and the overall profit gained from it. This is achieved by calculating the total rental price without penalty, which involves multiplying the rental duration by the daily hire rate of the car and then subtracting any applicable discounts and adding extra rental price if any. It then, considers the penalty amount calculated if the return date exceeds the car rental end date and then calculates profit gained from extra equipments if they were rented to add all the amounts to the total profit. Finally, it prints customer's information with the highest revenue and less penalty amount. If there were fewer customers (less than 3) whove rented that specified category, it will provide a message indicating the actual count of customers associated with that category after displaying cutomers' information.
CREATE OR REPLACE PROCEDURE FindTopCustomers(p_car_category_id IN VARCHAR2)
IS
   v_customer_count NUMBER := 0; -- Variable to store the count of customers retrieved
   v_confirmed_status NUMBER;
   v_ongoing_status NUMBER;
   v_completed_status NUMBER;
   v_late_return_status NUMBER;
BEGIN
   SELECT car_rental_status_id INTO v_confirmed_status FROM car_rental_status WHERE car_rental_status_description = 'Confirmed';
   SELECT car_rental_status_id INTO v_ongoing_status FROM car_rental_status WHERE car_rental_status_description = 'On-going';
   SELECT car_rental_status_id INTO v_completed_status FROM car_rental_status WHERE car_rental_status_description = 'Completed';
   SELECT car_rental_status_id INTO v_late_return_status FROM car_rental_status WHERE car_rental_status_description = 'Late Return';
   FOR customer_rec IN (
       SELECT
           c.CUSTOMER_ID,
           c.CUSTOMER_FIRST_NAME || ' ' || c.CUSTOMER_LAST_NAME AS customer_name,
           COUNT(cr.CAR_RENTAL_ID) AS rental_count,
           SUM(
               ((cr.CAR_RENTAL_END_DATE - cr.CAR_RENTAL_START_DATE) * car.CAR_DAILY_HIRE_RATE)
               - NVL(
                   (SELECT DISCOUNT_AMOUNT / 100 *
                       (cr.CAR_RENTAL_END_DATE - cr.CAR_RENTAL_START_DATE) * car.CAR_DAILY_HIRE_RATE
                   FROM DISCOUNT
                   WHERE DISCOUNT_CODE = cr.DISCOUNT_CODE
                   ), 0
               )
               +
               NVL(
                   (SELECT SUM(penalty_amount) FROM PENALTY WHERE CAR_RENTAL_ID = cr.CAR_RENTAL_ID), 0
               )
               +
               NVL(
                   (SELECT SUM(er.QUANTITY * ee.EQUIPMENT_DAILY_RENTAL_PRICE * (cr.CAR_RENTAL_END_DATE - cr.CAR_RENTAL_START_DATE)) FROM EXTRA_EQUIPMENT ee JOIN EXTRA_RENTAL er ON ee.EQUIPMENT_ID = er.EQUIPMENT_ID WHERE er.CAR_RENTAL_ID = cr.CAR_RENTAL_ID), 0
               )
           ) AS total_rental_price
       FROM
           CUSTOMER c
           JOIN CAR_RENTAL cr ON c.CUSTOMER_ID = cr.CUSTOMER_ID
           JOIN CAR car ON cr.CAR_REGISTRATION_PLATE_NUMBER = car.CAR_REGISTRATION_PLATE_NUMBER
           JOIN CAR_CATEGORY cc ON cc.CATEGORY_ID = car.CATEGORY_ID
       WHERE
           car.CATEGORY_ID = p_car_category_id
           AND cr.car_Rental_status_id IN (v_confirmed_status, v_ongoing_status, v_completed_status, v_late_return_status)
       GROUP BY
           c.CUSTOMER_ID, c.CUSTOMER_FIRST_NAME, c.CUSTOMER_LAST_NAME
       ORDER BY
           total_rental_price DESC
   ) LOOP
       v_customer_count := v_customer_count + 1;
       -- Print the data
       DBMS_OUTPUT.PUT_LINE('Customer ID: ' || customer_rec.CUSTOMER_ID);
       DBMS_OUTPUT.PUT_LINE('Customer Name: ' || customer_rec.customer_name);
       DBMS_OUTPUT.PUT_LINE('Rental Count: ' || customer_rec.rental_count);
       DBMS_OUTPUT.PUT_LINE('Total Amount With Extras and Penalty: ' || TO_CHAR(customer_rec.total_rental_price));
       DBMS_OUTPUT.PUT_LINE('-------------------------');
       -- Exit the loop if 3 customers have been retrieved
       EXIT WHEN v_customer_count >= 3;
   END LOOP;
   -- Display a message if no customers were found
   IF v_customer_count = 0 THEN
       DBMS_OUTPUT.PUT_LINE('No customers found.');
   END IF;
   -- Display a message if fewer than 3 customers were found
   IF v_customer_count < 3 THEN
       DBMS_OUTPUT.PUT_LINE('Only ' || v_customer_count || ' customers found.');
   END IF;
   EXCEPTION
   WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('Error: '||SQLERRM);
END;
/



--!PROCEDURE 3
-- The procedure ' get_top_3_selling_extras_per_location' will display the top 3 selling extra equipments of last year based on a specified location. It fetches the location id through the provided location name to utilize it for calculating the total rental price of extra equipment that is by multiplying the rental duration with the daily equipment hire rate and quantity. The rental duration will be determined by joining extra rental and car rental while locations will be determined by joining extra rental and car rental (which includes the employee id associated with the car rental), and employee ( which includes the location id for that employee). Additionally, it will also calculate the total rental count for each equipment within the same query. Finally it displays a list of the top 3 selling extra equipments and it's information, while ranking them in descending order. If fewer than three items are found, it provides a message indicating the number of equipment rentals for that location.

CREATE OR REPLACE PROCEDURE get_top_3_selling_extras_per_location (p_location_name in VARCHAR2) AS
    v_location_id NUMBER;
    v_location_name VARCHAR2(100);
    v_confirmed_status NUMBER;
   v_ongoing_status NUMBER;
   v_completed_status NUMBER;
   v_late_return_status NUMBER;
BEGIN
    SELECT car_rental_status_id INTO v_confirmed_status FROM car_rental_status WHERE car_rental_status_description = 'Confirmed';
   SELECT car_rental_status_id INTO v_ongoing_status FROM car_rental_status WHERE car_rental_status_description = 'On-going';
   SELECT car_rental_status_id INTO v_completed_status FROM car_rental_status WHERE car_rental_status_description = 'Completed';
   SELECT car_rental_status_id INTO v_late_return_status FROM car_rental_status WHERE car_rental_status_description = 'Late Return';
   
    -- Get the location ID based on the provided location name
    SELECT location_id INTO v_location_id FROM LOCATION WHERE LOCATION_CITY = p_location_name;
    
    -- Get the location name for display purposes
    SELECT LOCATION_CITY INTO v_location_name FROM LOCATION WHERE LOCATION_ID = v_location_id;

    DBMS_OUTPUT.PUT_LINE('Top 3 Selling Extra Equipment in the Last Year for ' || v_location_name);
    DBMS_OUTPUT.PUT_LINE('Rank | Equipment Name | Total Rental Price (BHD) | Total Rental Count');
    
    -- Variable to keep track of rank
    DECLARE
        rank_counter NUMBER := 1;
    BEGIN
        FOR equipment IN (
            SELECT e.EQUPMENT_NAME,
                   SUM((er.QUANTITY * e.EQUIPMENT_DAILY_RENTAL_PRICE) * (cr.CAR_RENTAL_END_DATE - cr.CAR_RENTAL_START_DATE)) AS Total_Rental_Price,
                   COUNT(er.EQUIPMENT_ID) AS Total_Rental_Count
            FROM EXTRA_EQUIPMENT e, EXTRA_RENTAL er, CAR_RENTAL cr, EMPLOYEE emp
            WHERE e.EQUIPMENT_ID = er.EQUIPMENT_ID
              AND er.CAR_RENTAL_ID = cr.CAR_RENTAL_ID
              AND cr.EMPLOYEE_ID = emp.EMPLOYEE_ID
              AND emp.LOCATION_ID = v_location_id
              AND cr.CAR_RENTAL_END_DATE BETWEEN ADD_MONTHS(TRUNC(SYSDATE, 'YEAR'), -12) AND TRUNC(SYSDATE) AND cr.car_Rental_status_id IN (v_confirmed_status, v_ongoing_status, v_completed_status, v_late_return_status)
            GROUP BY e.EQUPMENT_NAME
            ORDER BY Total_Rental_Price DESC
        )
        LOOP
            -- Output the rank, equipment name, total rental price, and rental count for each equipment
            DBMS_OUTPUT.PUT_LINE(rank_counter || ' | ' || equipment.EQUPMENT_NAME || ' | ' || equipment.Total_Rental_Price || ' BHD | ' || equipment.Total_Rental_Count);
            
            -- Increment the rank counter
            rank_counter := rank_counter + 1;
            
            -- Exit the loop after the top 3
            EXIT WHEN rank_counter > 3;
        END LOOP;
        
        -- If less than 3 items were found, display a message
        IF rank_counter <= 3 THEN
            DBMS_OUTPUT.PUT_LINE('-----------------------');
            DBMS_OUTPUT.PUT_LINE(rank_counter - 1 || ' equipment rental found for this location.');
        END IF;
    END;
     EXCEPTION
   WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('Error: '||SQLERRM);
END;
/




--!PROCEDURE 4
-- The procedure 'CalculateRentalMetrics' will calculate the statistics for models rented for each location within a specified year range (start and end year passed as parameter), including the average, minimum, and maximum rental duration as well as the total revenue. If no rentals are found for a location in the specified years, it outputs a message. Any errors during execution are also handled with an error message. 
CREATE OR REPLACE PROCEDURE CalculateRentalMetrics (
    p_start_year IN NUMBER,
    p_end_year IN NUMBER
  
) AS
  v_confirmed_status NUMBER;
   v_ongoing_status NUMBER;
   v_completed_status NUMBER;
   v_late_return_status NUMBER;
BEGIN
    SELECT car_rental_status_id INTO v_confirmed_status FROM car_rental_status WHERE car_rental_status_description = 'Confirmed';
   SELECT car_rental_status_id INTO v_ongoing_status FROM car_rental_status WHERE car_rental_status_description = 'On-going';
   SELECT car_rental_status_id INTO v_completed_status FROM car_rental_status WHERE car_rental_status_description = 'Completed';
   SELECT car_rental_status_id INTO v_late_return_status FROM car_rental_status WHERE car_rental_status_description = 'Late Return';
   
    FOR loc_rec IN (
        SELECT DISTINCT l.LOCATION_CITY
        FROM LOCATION l
        ORDER BY l.LOCATION_CITY
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('--------------------');
        DBMS_OUTPUT.PUT_LINE('Location Name: ' || loc_rec.LOCATION_CITY);
        
        -- Count the number of rentals for the location in the specified year range
        DECLARE
            v_rental_count NUMBER;
        BEGIN
            SELECT COUNT(*)
            INTO v_rental_count
            FROM CAR_RENTAL cr, EMPLOYEE e, LOCATION l, CAR c, MODEL m
            WHERE 
                cr.EMPLOYEE_ID = e.EMPLOYEE_ID
                AND l.LOCATION_ID = e.LOCATION_ID
                AND cr.CAR_REGISTRATION_PLATE_NUMBER = c.CAR_REGISTRATION_PLATE_NUMBER 
                AND c.MODEL_ID = m.MODEL_ID
                AND l.LOCATION_CITY = loc_rec.LOCATION_CITY
                AND cr.CAR_RENTAL_START_DATE >= TO_DATE(p_start_year || '-01-01', 'YYYY-MM-DD')
                AND cr.CAR_RENTAL_START_DATE < TO_DATE((p_end_year + 1) || '-01-01', 'YYYY-MM-DD');

            -- If there are rentals for the location, fetch rental metrics
            IF v_rental_count > 0 THEN
                FOR rec IN (
                    SELECT 
                        m.MODEL_NAME,
                        ROUND(AVG(
                            CASE
                                WHEN cr.CAR_RENTAL_END_DATE IS NULL THEN SYSDATE - cr.CAR_RENTAL_START_DATE
                                ELSE cr.CAR_RENTAL_END_DATE - cr.CAR_RENTAL_START_DATE
                            END), 2) AS AVG_DURATION,
                        MIN(
                            CASE
                                WHEN cr.CAR_RENTAL_END_DATE IS NULL THEN SYSDATE - cr.CAR_RENTAL_START_DATE
                                ELSE cr.CAR_RENTAL_END_DATE - cr.CAR_RENTAL_START_DATE
                            END) AS MIN_DURATION,
                        MAX(
                            CASE
                                WHEN cr.CAR_RENTAL_END_DATE IS NULL THEN SYSDATE - cr.CAR_RENTAL_START_DATE
                                ELSE cr.CAR_RENTAL_END_DATE - cr.CAR_RENTAL_START_DATE
                            END) AS MAX_DURATION, 
                        SUM(
                            ((CASE
                                WHEN cr.CAR_RENTAL_END_DATE IS NULL THEN SYSDATE - cr.CAR_RENTAL_START_DATE
                                ELSE cr.CAR_RENTAL_END_DATE - cr.CAR_RENTAL_START_DATE
                            END) * c.CAR_DAILY_HIRE_RATE)
                            * NVL((SELECT (1 - MIN(DISCOUNT_AMOUNT) / 100) FROM DISCOUNT WHERE DISCOUNT_CODE = cr.DISCOUNT_CODE), 1)
                            + NVL((SELECT MIN(PENALTY_AMOUNT) FROM PENALTY WHERE CAR_RENTAL_ID = cr.CAR_RENTAL_ID), 0)
                        ) AS TOTAL_REVENUE
                    FROM 
                        CAR_RENTAL cr, EMPLOYEE e, LOCATION l, CAR c, MODEL m
                    WHERE 
                        cr.EMPLOYEE_ID = e.EMPLOYEE_ID
                        AND l.LOCATION_ID = e.LOCATION_ID
                        AND cr.CAR_REGISTRATION_PLATE_NUMBER = c.CAR_REGISTRATION_PLATE_NUMBER 
                        AND c.MODEL_ID = m.MODEL_ID
                        AND l.LOCATION_CITY = loc_rec.LOCATION_CITY
                        AND cr.CAR_RENTAL_START_DATE >= TO_DATE(p_start_year || '-01-01', 'YYYY-MM-DD')
                        AND cr.CAR_RENTAL_START_DATE < TO_DATE((p_end_year + 1) || '-01-01', 'YYYY-MM-DD') AND cr.car_Rental_status_id IN (v_confirmed_status, v_ongoing_status, v_completed_status, v_late_return_status)
                    GROUP BY 
                        m.MODEL_NAME
                    ORDER BY 
                        m.MODEL_NAME
                ) LOOP
                    DBMS_OUTPUT.PUT_LINE('Model Name: ' || rec.MODEL_NAME || ', Avg: ' || rec.AVG_DURATION || ' days, Min: ' || rec.MIN_DURATION || ' days, Max: ' || rec.MAX_DURATION || ' days, Total Revenue: ' || rec.TOTAL_REVENUE);
                END LOOP;
            ELSE
                -- Display message when there are no rentals for the location in the specified year range
                DBMS_OUTPUT.PUT_LINE('No car rentals for this location between ' || p_start_year || ' and ' || p_end_year);
            END IF;
        END;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
/


--!PL/SQL script for creating packages.
CREATE OR REPLACE PACKAGE RentalManagementPackage AS
    -- Procedure to find top selling models
    PROCEDURE FindTopSellingModels(p_year IN NUMBER);
    PROCEDURE FindTopCustomers(p_car_category_id IN VARCHAR2);
    PROCEDURE get_top_3_selling_extras_per_location (p_location_name in VARCHAR2);
    PROCEDURE CalculateRentalMetrics (p_start_year IN NUMBER,p_end_year IN NUMBER);
    FUNCTION calculate_daily_late_return_penalty_for_car(p_car_id IN CAR.CAR_REGISTRATION_PLATE_NUMBER%TYPE) RETURN NUMBER;
    FUNCTION predictedMaintenanceDate (v_car_reg NUMBER,v_desired_mileage NUMBER) RETURN DATE;
    FUNCTION calcCarProfitForCar(p_car_reg IN NUMBER) RETURN NUMBER;
    FUNCTION calculate_daily_hire_rate_for_car(p_car_id IN CAR.CAR_REGISTRATION_PLATE_NUMBER%TYPE) RETURN NUMBER;
END RentalManagementPackage;
/

CREATE OR REPLACE PACKAGE BODY RentalManagementPackage AS
PROCEDURE FindTopSellingModels (
   p_year IN NUMBER
)
IS
   -- Define a record type for model details
   TYPE ModelRecType IS RECORD (
      model_name           VARCHAR2(100),
      total_rentals        NUMBER,
      total_revenue        NUMBER,
      location_city        VARCHAR2(100),
      avg_rental_duration  NUMBER,
      min_rental_duration  NUMBER,
      max_rental_duration  NUMBER
   );
   
   -- Declare a variable of the record type
   model_rec ModelRecType;

   startDate DATE;
   endDate DATE;
   v_count NUMBER := 0;
   v_confirmed_status NUMBER;
   v_ongoing_status NUMBER;
   v_completed_status NUMBER;
   v_late_return_status NUMBER;

BEGIN
   -- Set the start and end dates based on the provided year
   startDate := TO_DATE(p_year || '-01-01', 'YYYY-MM-DD');
   endDate := TO_DATE(p_year || '-12-31', 'YYYY-MM-DD');

   -- Retrieve car rental status IDs
   SELECT car_rental_status_id INTO v_confirmed_status FROM car_rental_status WHERE car_rental_status_description = 'Confirmed';
   SELECT car_rental_status_id INTO v_ongoing_status FROM car_rental_status WHERE car_rental_status_description = 'On-going';
   SELECT car_rental_status_id INTO v_completed_status FROM car_rental_status WHERE car_rental_status_description = 'Completed';
   SELECT car_rental_status_id INTO v_late_return_status FROM car_rental_status WHERE car_rental_status_description = 'Late Return';

   FOR rec IN (
       SELECT
           (SELECT model_name FROM model WHERE model_id = c.model_id) AS model_name,
           COUNT(r.car_registration_plate_number) AS total_rentals,
           SUM(
               (r.car_rental_end_date - r.car_rental_start_date) * c.car_daily_hire_rate
               - NVL(
                   (SELECT discount_amount / 100 * (r.car_rental_end_date - r.car_rental_start_date) * c.car_daily_hire_rate
                    FROM discount
                    WHERE discount_code = r.discount_code), 0
               )
               + NVL(
                   (SELECT SUM(penalty_amount) FROM penalty WHERE car_rental_id = r.car_rental_id), 0
               )
           ) AS total_revenue,
           (SELECT location_city FROM location WHERE location_id = c.location_id) AS location_city,
           AVG(r.car_rental_end_date - r.car_rental_start_date) AS avg_rental_duration,
           MIN(r.car_rental_end_date - r.car_rental_start_date) AS min_rental_duration,
           MAX(r.car_rental_end_date - r.car_rental_start_date) AS max_rental_duration
       FROM
           car_rental r,
           car c
       WHERE
           r.car_registration_plate_number = c.car_registration_plate_number
           AND r.car_rental_start_date BETWEEN startDate AND endDate
           AND r.car_rental_status_id IN (v_confirmed_status, v_ongoing_status, v_completed_status, v_late_return_status)
       GROUP BY
           c.model_id, c.location_id
       ORDER BY
           total_revenue DESC
   ) LOOP
       -- Populate the record variable with the current row's data
       model_rec.model_name := rec.model_name;
       model_rec.total_rentals := rec.total_rentals;
       model_rec.total_revenue := NVL(rec.total_revenue, 0);
       model_rec.location_city := rec.location_city;
       model_rec.avg_rental_duration := ROUND(rec.avg_rental_duration, 2);
       model_rec.min_rental_duration := ROUND(rec.min_rental_duration, 2);
       model_rec.max_rental_duration := ROUND(rec.max_rental_duration, 2);

       v_count := v_count + 1;

       -- Print or do something with the data
       DBMS_OUTPUT.PUT_LINE('Model Name: ' || model_rec.model_name);
       DBMS_OUTPUT.PUT_LINE('Total Rentals: ' || model_rec.total_rentals);
       DBMS_OUTPUT.PUT_LINE('Total Revenue: ' || model_rec.total_revenue);
       DBMS_OUTPUT.PUT_LINE('Location City: ' || model_rec.location_city);
       DBMS_OUTPUT.PUT_LINE('Average Rental Duration: ' || model_rec.avg_rental_duration || ' days');
       DBMS_OUTPUT.PUT_LINE('Minimum Rental Duration: ' || model_rec.min_rental_duration || ' days');
       DBMS_OUTPUT.PUT_LINE('Maximum Rental Duration: ' || model_rec.max_rental_duration || ' days');
       DBMS_OUTPUT.PUT_LINE('-------------------------');

       -- Exit the loop after processing the top 3 models
       EXIT WHEN v_count >= 3;
   END LOOP;

   -- If fewer than 3 models were found, display a message
   IF v_count < 3 THEN
       DBMS_OUTPUT.PUT_LINE('There were only ' || v_count || ' models rented in ' || p_year);
   END IF;
 EXCEPTION
   WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('Error: '||SQLERRM);
END;

PROCEDURE FindTopCustomers(p_car_category_id IN VARCHAR2)
IS
   v_customer_count NUMBER := 0; -- Variable to store the count of customers retrieved
   v_confirmed_status NUMBER;
   v_ongoing_status NUMBER;
   v_completed_status NUMBER;
   v_late_return_status NUMBER;
BEGIN
   SELECT car_rental_status_id INTO v_confirmed_status FROM car_rental_status WHERE car_rental_status_description = 'Confirmed';
   SELECT car_rental_status_id INTO v_ongoing_status FROM car_rental_status WHERE car_rental_status_description = 'On-going';
   SELECT car_rental_status_id INTO v_completed_status FROM car_rental_status WHERE car_rental_status_description = 'Completed';
   SELECT car_rental_status_id INTO v_late_return_status FROM car_rental_status WHERE car_rental_status_description = 'Late Return';
   FOR customer_rec IN (
       SELECT
           c.CUSTOMER_ID,
           c.CUSTOMER_FIRST_NAME || ' ' || c.CUSTOMER_LAST_NAME AS customer_name,
           COUNT(cr.CAR_RENTAL_ID) AS rental_count,
           SUM(
               ((cr.CAR_RENTAL_END_DATE - cr.CAR_RENTAL_START_DATE) * car.CAR_DAILY_HIRE_RATE)
               - NVL(
                   (SELECT DISCOUNT_AMOUNT / 100 *
                       (cr.CAR_RENTAL_END_DATE - cr.CAR_RENTAL_START_DATE) * car.CAR_DAILY_HIRE_RATE
                   FROM DISCOUNT
                   WHERE DISCOUNT_CODE = cr.DISCOUNT_CODE
                   ), 0
               )
               +
               NVL(
                   (SELECT SUM(penalty_amount) FROM PENALTY WHERE CAR_RENTAL_ID = cr.CAR_RENTAL_ID), 0
               )
               +
               NVL(
                   (SELECT SUM(er.QUANTITY * ee.EQUIPMENT_DAILY_RENTAL_PRICE * (cr.CAR_RENTAL_END_DATE - cr.CAR_RENTAL_START_DATE)) FROM EXTRA_EQUIPMENT ee JOIN EXTRA_RENTAL er ON ee.EQUIPMENT_ID = er.EQUIPMENT_ID WHERE er.CAR_RENTAL_ID = cr.CAR_RENTAL_ID), 0
               )
           ) AS total_rental_price
       FROM
           CUSTOMER c
           JOIN CAR_RENTAL cr ON c.CUSTOMER_ID = cr.CUSTOMER_ID
           JOIN CAR car ON cr.CAR_REGISTRATION_PLATE_NUMBER = car.CAR_REGISTRATION_PLATE_NUMBER
           JOIN CAR_CATEGORY cc ON cc.CATEGORY_ID = car.CATEGORY_ID
       WHERE
           car.CATEGORY_ID = p_car_category_id
           AND cr.car_Rental_status_id IN (v_confirmed_status, v_ongoing_status, v_completed_status, v_late_return_status)
       GROUP BY
           c.CUSTOMER_ID, c.CUSTOMER_FIRST_NAME, c.CUSTOMER_LAST_NAME
       ORDER BY
           total_rental_price DESC
   ) LOOP
       v_customer_count := v_customer_count + 1;
       -- Print the data
       DBMS_OUTPUT.PUT_LINE('Customer ID: ' || customer_rec.CUSTOMER_ID);
       DBMS_OUTPUT.PUT_LINE('Customer Name: ' || customer_rec.customer_name);
       DBMS_OUTPUT.PUT_LINE('Rental Count: ' || customer_rec.rental_count);
       DBMS_OUTPUT.PUT_LINE('Total Amount With Extras and Penalty: ' || TO_CHAR(customer_rec.total_rental_price));
       DBMS_OUTPUT.PUT_LINE('-------------------------');
       -- Exit the loop if 3 customers have been retrieved
       EXIT WHEN v_customer_count >= 3;
   END LOOP;
   -- Display a message if no customers were found
   IF v_customer_count = 0 THEN
       DBMS_OUTPUT.PUT_LINE('No customers found.');
   END IF;
   -- Display a message if fewer than 3 customers were found
   IF v_customer_count < 3 THEN
       DBMS_OUTPUT.PUT_LINE('Only ' || v_customer_count || ' customers found.');
   END IF;
    EXCEPTION
   WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('Error: '||SQLERRM);
END;

PROCEDURE get_top_3_selling_extras_per_location (p_location_name in VARCHAR2) AS
    v_location_id NUMBER;
    v_location_name VARCHAR2(100);
    v_confirmed_status NUMBER;
   v_ongoing_status NUMBER;
   v_completed_status NUMBER;
   v_late_return_status NUMBER;
BEGIN
    SELECT car_rental_status_id INTO v_confirmed_status FROM car_rental_status WHERE car_rental_status_description = 'Confirmed';
   SELECT car_rental_status_id INTO v_ongoing_status FROM car_rental_status WHERE car_rental_status_description = 'On-going';
   SELECT car_rental_status_id INTO v_completed_status FROM car_rental_status WHERE car_rental_status_description = 'Completed';
   SELECT car_rental_status_id INTO v_late_return_status FROM car_rental_status WHERE car_rental_status_description = 'Late Return';
   
    -- Get the location ID based on the provided location name
    SELECT location_id INTO v_location_id FROM LOCATION WHERE LOCATION_CITY = p_location_name;
    
    -- Get the location name for display purposes
    SELECT LOCATION_CITY INTO v_location_name FROM LOCATION WHERE LOCATION_ID = v_location_id;

    DBMS_OUTPUT.PUT_LINE('Top 3 Selling Extra Equipment in the Last Year for ' || v_location_name);
    DBMS_OUTPUT.PUT_LINE('Rank | Equipment Name | Total Rental Price (BHD) | Total Rental Count');
    
    -- Variable to keep track of rank
    DECLARE
        rank_counter NUMBER := 1;
    BEGIN
        FOR equipment IN (
            SELECT e.EQUPMENT_NAME,
                   SUM((er.QUANTITY * e.EQUIPMENT_DAILY_RENTAL_PRICE) * (cr.CAR_RENTAL_END_DATE - cr.CAR_RENTAL_START_DATE)) AS Total_Rental_Price,
                   COUNT(er.EQUIPMENT_ID) AS Total_Rental_Count
            FROM EXTRA_EQUIPMENT e, EXTRA_RENTAL er, CAR_RENTAL cr, EMPLOYEE emp
            WHERE e.EQUIPMENT_ID = er.EQUIPMENT_ID
              AND er.CAR_RENTAL_ID = cr.CAR_RENTAL_ID
              AND cr.EMPLOYEE_ID = emp.EMPLOYEE_ID
              AND emp.LOCATION_ID = v_location_id
              AND cr.CAR_RENTAL_END_DATE BETWEEN ADD_MONTHS(TRUNC(SYSDATE, 'YEAR'), -12) AND TRUNC(SYSDATE) AND cr.car_Rental_status_id IN (v_confirmed_status, v_ongoing_status, v_completed_status, v_late_return_status)
            GROUP BY e.EQUPMENT_NAME
            ORDER BY Total_Rental_Price DESC
        )
        LOOP
            -- Output the rank, equipment name, total rental price, and rental count for each equipment
            DBMS_OUTPUT.PUT_LINE(rank_counter || ' | ' || equipment.EQUPMENT_NAME || ' | ' || equipment.Total_Rental_Price || ' BHD | ' || equipment.Total_Rental_Count);
            
            -- Increment the rank counter
            rank_counter := rank_counter + 1;
            
            -- Exit the loop after the top 3
            EXIT WHEN rank_counter > 3;
        END LOOP;
        
        -- If less than 3 items were found, display a message
        IF rank_counter <= 3 THEN
            DBMS_OUTPUT.PUT_LINE('-----------------------');
            DBMS_OUTPUT.PUT_LINE(rank_counter - 1 || ' equipment rental found for this location.');
        END IF;
    END;
     EXCEPTION
   WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('Error: '||SQLERRM);
END;

PROCEDURE CalculateRentalMetrics (
    p_start_year IN NUMBER,
    p_end_year IN NUMBER
  
) AS
  v_confirmed_status NUMBER;
   v_ongoing_status NUMBER;
   v_completed_status NUMBER;
   v_late_return_status NUMBER;
BEGIN
    SELECT car_rental_status_id INTO v_confirmed_status FROM car_rental_status WHERE car_rental_status_description = 'Confirmed';
   SELECT car_rental_status_id INTO v_ongoing_status FROM car_rental_status WHERE car_rental_status_description = 'On-going';
   SELECT car_rental_status_id INTO v_completed_status FROM car_rental_status WHERE car_rental_status_description = 'Completed';
   SELECT car_rental_status_id INTO v_late_return_status FROM car_rental_status WHERE car_rental_status_description = 'Late Return';
   
    FOR loc_rec IN (
        SELECT DISTINCT l.LOCATION_CITY
        FROM LOCATION l
        ORDER BY l.LOCATION_CITY
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('--------------------');
        DBMS_OUTPUT.PUT_LINE('Location Name: ' || loc_rec.LOCATION_CITY);
        
        -- Count the number of rentals for the location in the specified year range
        DECLARE
            v_rental_count NUMBER;
        BEGIN
            SELECT COUNT(*)
            INTO v_rental_count
            FROM CAR_RENTAL cr, EMPLOYEE e, LOCATION l, CAR c, MODEL m
            WHERE 
                cr.EMPLOYEE_ID = e.EMPLOYEE_ID
                AND l.LOCATION_ID = e.LOCATION_ID
                AND cr.CAR_REGISTRATION_PLATE_NUMBER = c.CAR_REGISTRATION_PLATE_NUMBER 
                AND c.MODEL_ID = m.MODEL_ID
                AND l.LOCATION_CITY = loc_rec.LOCATION_CITY
                AND cr.CAR_RENTAL_START_DATE >= TO_DATE(p_start_year || '-01-01', 'YYYY-MM-DD')
                AND cr.CAR_RENTAL_START_DATE < TO_DATE((p_end_year + 1) || '-01-01', 'YYYY-MM-DD');

            -- If there are rentals for the location, fetch rental metrics
            IF v_rental_count > 0 THEN
                FOR rec IN (
                    SELECT 
                        m.MODEL_NAME,
                        ROUND(AVG(
                            CASE
                                WHEN cr.CAR_RENTAL_END_DATE IS NULL THEN SYSDATE - cr.CAR_RENTAL_START_DATE
                                ELSE cr.CAR_RENTAL_END_DATE - cr.CAR_RENTAL_START_DATE
                            END), 2) AS AVG_DURATION,
                        MIN(
                            CASE
                                WHEN cr.CAR_RENTAL_END_DATE IS NULL THEN SYSDATE - cr.CAR_RENTAL_START_DATE
                                ELSE cr.CAR_RENTAL_END_DATE - cr.CAR_RENTAL_START_DATE
                            END) AS MIN_DURATION,
                        MAX(
                            CASE
                                WHEN cr.CAR_RENTAL_END_DATE IS NULL THEN SYSDATE - cr.CAR_RENTAL_START_DATE
                                ELSE cr.CAR_RENTAL_END_DATE - cr.CAR_RENTAL_START_DATE
                            END) AS MAX_DURATION, 
                        SUM(
                            ((CASE
                                WHEN cr.CAR_RENTAL_END_DATE IS NULL THEN SYSDATE - cr.CAR_RENTAL_START_DATE
                                ELSE cr.CAR_RENTAL_END_DATE - cr.CAR_RENTAL_START_DATE
                            END) * c.CAR_DAILY_HIRE_RATE)
                            * NVL((SELECT (1 - MIN(DISCOUNT_AMOUNT) / 100) FROM DISCOUNT WHERE DISCOUNT_CODE = cr.DISCOUNT_CODE), 1)
                            + NVL((SELECT MIN(PENALTY_AMOUNT) FROM PENALTY WHERE CAR_RENTAL_ID = cr.CAR_RENTAL_ID), 0)
                        ) AS TOTAL_REVENUE
                    FROM 
                        CAR_RENTAL cr, EMPLOYEE e, LOCATION l, CAR c, MODEL m
                    WHERE 
                        cr.EMPLOYEE_ID = e.EMPLOYEE_ID
                        AND l.LOCATION_ID = e.LOCATION_ID
                        AND cr.CAR_REGISTRATION_PLATE_NUMBER = c.CAR_REGISTRATION_PLATE_NUMBER 
                        AND c.MODEL_ID = m.MODEL_ID
                        AND l.LOCATION_CITY = loc_rec.LOCATION_CITY
                        AND cr.CAR_RENTAL_START_DATE >= TO_DATE(p_start_year || '-01-01', 'YYYY-MM-DD')
                        AND cr.CAR_RENTAL_START_DATE < TO_DATE((p_end_year + 1) || '-01-01', 'YYYY-MM-DD') AND cr.car_Rental_status_id IN (v_confirmed_status, v_ongoing_status, v_completed_status, v_late_return_status)
                    GROUP BY 
                        m.MODEL_NAME
                    ORDER BY 
                        m.MODEL_NAME
                ) LOOP
                    DBMS_OUTPUT.PUT_LINE('Model Name: ' || rec.MODEL_NAME || ', Avg: ' || rec.AVG_DURATION || ' days, Min: ' || rec.MIN_DURATION || ' days, Max: ' || rec.MAX_DURATION || ' days, Total Revenue: ' || rec.TOTAL_REVENUE);
                END LOOP;
            ELSE
                -- Display message when there are no rentals for the location in the specified year range
                DBMS_OUTPUT.PUT_LINE('No car rentals for this location between ' || p_start_year || ' and ' || p_end_year);
            END IF;
        END;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;

FUNCTION calculate_daily_late_return_penalty_for_car(
    p_car_id IN CAR.CAR_REGISTRATION_PLATE_NUMBER%TYPE
) RETURN NUMBER IS 
    v_penalty_rate NUMBER;
    v_max_penalty NUMBER;
    v_category_id CAR.CATEGORY_ID%TYPE;
    v_car_year_manufactured CAR.YEAR_MANUFACTURED%TYPE;
    v_car_daily_hire_rate CAR.CAR_DAILY_HIRE_RATE%TYPE;
BEGIN
    -- Fetch necessary information based on car rental ID
  SELECT c.CATEGORY_ID, c.YEAR_MANUFACTURED, c.CAR_DAILY_HIRE_RATE
INTO v_category_id, v_car_year_manufactured, v_car_daily_hire_rate
FROM CAR c
JOIN CAR_CATEGORY cc ON c.category_id = cc.category_id 
WHERE c.CAR_REGISTRATION_PLATE_NUMBER = p_car_id;

        -- Determine the penalty rate based on the category and year manufactured
        SELECT 
            CASE
                WHEN v_category_id = 'ECO' THEN
                    CASE
                        WHEN v_car_year_manufactured >= 2020 THEN 0.04
                        ELSE 0.030
                    END
                WHEN v_category_id = 'LUX' THEN
                    CASE
                        WHEN v_car_year_manufactured >= 2020 THEN 0.06
                        ELSE 0.040
                    END
                WHEN v_category_id = 'SUV' THEN
                    CASE
                        WHEN v_car_year_manufactured >= 2020 THEN 0.05
                        ELSE 0.045
                    END
                WHEN v_category_id = 'ELC' THEN
                    CASE
                        WHEN v_car_year_manufactured >= 2020 THEN 0.075
                        ELSE 0.065
                    END
                ELSE 0.08 -- Default penalty rate for other categories
            END INTO v_penalty_rate
        FROM DUAL;

        -- Calculate the maximum penalty (10% of daily hire rate)
        v_max_penalty := v_car_daily_hire_rate * 0.1;

        -- Calculate the penalty, ensuring it does not exceed the maximum penalty
        RETURN LEAST(v_penalty_rate * v_car_daily_hire_rate , v_max_penalty); -- Returns the minimum value between the calculated penalty and the maximum penalty
 EXCEPTION
   WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('Error: '||SQLERRM);

END;

FUNCTION predictedMaintenanceDate (
   v_car_reg NUMBER,
   v_desired_mileage NUMBER
) RETURN DATE
IS
   v_predicted_date DATE;
   v_current_mileage NUMBER := 0; -- Initialize variables
   v_rental_duration_avg NUMBER := 0;
BEGIN
   -- Get the current mileage for the car
   SELECT
       CAR_CURRENT_MILEAGE INTO v_current_mileage
   FROM CAR
   WHERE CAR_REGISTRATION_PLATE_NUMBER = v_car_reg;


   -- Calculate the average rental duration for the specific car
   SELECT
       AVG(CAR_RENTAL_END_DATE - CAR_RENTAL_START_DATE) INTO v_rental_duration_avg
   FROM CAR_RENTAL
   WHERE CAR_REGISTRATION_PLATE_NUMBER = v_car_reg
   AND CAR_RENTAL_END_DATE IS NOT NULL; --  only completed rentals will be considered

   -- Avoid division by zero and handle null values
   IF v_current_mileage = 0 OR v_rental_duration_avg IS NULL OR v_rental_duration_avg = 0 THEN
       RETURN NULL;
   END IF;

   -- Calculate the predicted date
   v_predicted_date := SYSDATE + CEIL((v_desired_mileage - v_current_mileage) / (v_current_mileage / v_rental_duration_avg));

   RETURN v_predicted_date;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
       RETURN NULL;
   WHEN OTHERS THEN
       RETURN NULL;
END;

FUNCTION calcCarProfitForCar(p_car_reg IN NUMBER) RETURN NUMBER IS
    v_total_profit NUMBER := 0;
    v_confirmed_status NUMBER;
    v_ongoing_status NUMBER;
    v_completed_status NUMBER;
    v_late_return_status NUMBER;
BEGIN
    -- Get the status IDs for 'Confirmed', 'On-going', 'Completed', and 'Late Return'
    SELECT car_Rental_status_id INTO v_confirmed_status FROM car_rental_status WHERE car_rental_status_description = 'Confirmed'; 
    SELECT car_Rental_status_id INTO v_ongoing_status FROM car_rental_status WHERE car_rental_status_description = 'On-going'; 
    SELECT car_Rental_status_id INTO v_completed_status FROM car_rental_status WHERE car_rental_status_description = 'Completed'; 
    SELECT car_Rental_status_id INTO v_late_return_status FROM car_rental_status WHERE car_rental_status_description = 'Late Return';

    -- Calculate total profit including penalty amount if applicable
    SELECT SUM(
            ((r.CAR_RENTAL_END_DATE - r.CAR_RENTAL_START_DATE) * c.CAR_DAILY_HIRE_RATE)
            -
            NVL(
                (SELECT NVL(MAX(DISCOUNT_AMOUNT),0) / 100 *
                    (r.CAR_RENTAL_END_DATE - r.CAR_RENTAL_START_DATE)
                    * c.CAR_DAILY_HIRE_RATE
                FROM DISCOUNT
                WHERE DISCOUNT_CODE = r.DISCOUNT_CODE
                ), 0
            )
            +
            NVL(
                (SELECT SUM(penalty_amount) FROM PENALTY WHERE CAR_RENTAL_ID = r.CAR_RENTAL_ID), 0
            )
        )
    INTO v_total_profit
    FROM CAR_RENTAL r
    JOIN CAR c ON r.CAR_REGISTRATION_PLATE_NUMBER = c.CAR_REGISTRATION_PLATE_NUMBER
    WHERE r.CAR_REGISTRATION_PLATE_NUMBER = p_car_reg 
    AND r.CAR_RENTAL_STATUS_ID IN (v_confirmed_status, v_ongoing_status, v_completed_status, v_late_return_status);

    RETURN v_total_profit;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
    WHEN OTHERS THEN
        RETURN NULL;
END;

FUNCTION calculate_daily_hire_rate_for_car(
    p_car_id IN CAR.CAR_REGISTRATION_PLATE_NUMBER%TYPE
) RETURN NUMBER IS 
    v_category_id CAR.CATEGORY_ID%TYPE;
    v_car_year_manufactured CAR.YEAR_MANUFACTURED%TYPE;
    v_category_multiplier NUMBER;
    v_engine_multiplier NUMBER;
    v_engine_size NUMBER;
    v_option_type VARCHAR2(100);
    v_option_multiplier NUMBER;
BEGIN
    -- Fetch necessary information based on car registration plate number
    SELECT c.CATEGORY_ID, c.YEAR_MANUFACTURED
    INTO v_category_id, v_car_year_manufactured
    FROM CAR c
    JOIN CAR_CATEGORY cc ON c.category_id = cc.category_id 
    WHERE c.CAR_REGISTRATION_PLATE_NUMBER = p_car_id;

    -- Fetch engine size based on car registration plate number
    SELECT e.ENGINE_SIZE
    INTO v_engine_size
    FROM ENGINE e
    JOIN MODEL_ENGINE me ON e.ENGINE_ID = me.ENGINE_ID
    JOIN MODEL m ON me.MODEL_ID = m.MODEL_ID
    JOIN CAR c ON m.MODEL_ID = c.MODEL_ID
    WHERE c.CAR_REGISTRATION_PLATE_NUMBER = p_car_id
    AND ROWNUM = 1; -- Add this condition to ensure only one row is returned

    -- Fetch option type based on car registration plate number
    SELECT od.OPTION_TYPE
    INTO v_option_type
    FROM OPTION_DESCRIPTION od
    JOIN MODEL_OPTION mo ON od.OPTION_TYPE = mo.OPTION_TYPE
    JOIN MODEL m ON mo.MODEL_ID = m.MODEL_ID
    JOIN CAR c ON m.MODEL_ID = c.MODEL_ID
    WHERE c.CAR_REGISTRATION_PLATE_NUMBER = p_car_id
    AND ROWNUM = 1; -- Add this condition to ensure only one row is returned

    -- Determine the car daily hire rate based on the category and year manufactured
    SELECT 
        CASE
            WHEN v_category_id = 'ECO' THEN
                CASE
                    WHEN v_car_year_manufactured >= 2020 THEN 5
                    ELSE 3
                END
            WHEN v_category_id = 'LUX' THEN
                CASE
                    WHEN v_car_year_manufactured >= 2020 THEN 8
                    ELSE 6.5
                END
            WHEN v_category_id = 'SUV' THEN
                CASE
                    WHEN v_car_year_manufactured >= 2020 THEN 6
                    ELSE 5
                END
            WHEN v_category_id = 'ELC' THEN
                CASE
                    WHEN v_car_year_manufactured >= 2020 THEN 7
                    ELSE 6.3
                END
            ELSE 4.5 -- Default category multiplier
        END INTO v_category_multiplier
    FROM DUAL;

    -- Determine the value of the engine multiplier
    SELECT 
        CASE
            WHEN v_engine_size = 1.4 THEN 6
            WHEN v_engine_size = 1.5 THEN 7
            WHEN v_engine_size = 1.6 THEN 8
            WHEN v_engine_size = 1.7 THEN 9
            WHEN v_engine_size = 1.8 THEN 10
            ELSE 5
        END INTO v_engine_multiplier
    FROM DUAL;

    -- Determine the value of the option multiplier
    SELECT 
        CASE
            WHEN v_option_type = 'High-end' THEN 15
            WHEN v_option_type = 'Full Option' THEN 12
            WHEN v_option_type = 'Med Option' THEN 8
            WHEN v_option_type = 'Low Option' THEN 5
            ELSE 6
        END INTO v_option_multiplier
    FROM DUAL;

    -- Calculate the car daily hire rate based on engine size and category_id
    RETURN v_engine_multiplier * v_category_multiplier + v_option_multiplier;
     EXCEPTION
   WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('Error: '||SQLERRM);
END;

END;
/


--!PL/SQL script, based on anonymous blocks, to provide a mechanism for demonstrating the use of the above-mentioned database objects

--!ANONYMOUS BLOCKS FOR FUNCTIONS
--calculate_daily_late_return_penalty_for_car
--The anonymous block for the function 'calculate_daily_late_return_penalty_for_car' calculates the penalty rate only if the car_daily_late_return_panelty is null. The penalty is calculated by calling the function and passing the car's registration plate number as an argument. After the function returns the penalty the anonymous block updates the car table and sets the car_daily_late_return_panelty to the calculated penalty. Once that was successful a message will be displayed with the car's registration plate number and its new penalty rate.
SET SERVEROUTPUT ON;
set verify off;
DECLARE
   v_penalty NUMBER;
BEGIN
   FOR car_rec IN (SELECT * FROM CAR) LOOP
      -- Calculate penalty only if car_daily_late_return_panelty is null
      IF car_rec.car_daily_late_return_panelty IS NULL THEN
         v_penalty := calculate_daily_late_return_penalty_for_car(car_rec.CAR_REGISTRATION_PLATE_NUMBER);
      
         -- Update car_daily_late_return_panelty
         UPDATE CAR
         SET car_daily_late_return_panelty = v_penalty
         WHERE CAR_REGISTRATION_PLATE_NUMBER = car_rec.CAR_REGISTRATION_PLATE_NUMBER;
         
         -- print out details
         DBMS_OUTPUT.PUT_LINE('Calculated Penalty Rate for Car ' || car_rec.CAR_REGISTRATION_PLATE_NUMBER || ' is ' || v_penalty);
        ELSE
         DBMS_OUTPUT.PUT_LINE('Penalty Rate for Car ' || car_rec.CAR_REGISTRATION_PLATE_NUMBER || ' is already calculated: ' || car_rec.car_daily_late_return_panelty);

      END IF;
   END LOOP;
   
   COMMIT;
END;
/


--predictedMaintenanceDate
-- This PL/SQL block automates the process of scheduling car maintenance using registration plate numbers and desired mileage provided by the user. It will frist validate the existence of the car, then it will check if the current mileage is less than the actual mileage, if so it will call the '' function that will predict the next maintenance date for the desired mileage to be reached. However, if it reached the desired mileage it will insert a new record in the maintenance table with the predicted date as  the maintenance start date and (predicted date+1) as maintenance end date, indicating that the car is not available for one day because of 'regular-maintenance'. Additionally, it will update the car status to 'under-maintenance'. 

SET SERVEROUTPUT ON;
set verify off;
DECLARE
    v_car_reg NUMBER := &EnterCarRegistrationPlateNumber;
    v_desired_mileage NUMBER := &EnterDesiredMileage;
    v_current_mileage NUMBER;
    v_next_maintenance_start_date DATE;
BEGIN
    -- Check if the car exists
    SELECT CAR_CURRENT_MILEAGE INTO v_current_mileage 
    FROM CAR 
    WHERE CAR_REGISTRATION_PLATE_NUMBER = v_car_reg;

    IF SQL%NOTFOUND THEN
        DBMS_OUTPUT.PUT_LINE('The car with registration plate number ' || v_car_reg || ' does not exist.');
    ELSIF v_current_mileage<v_desired_mileage THEN
        -- Call the function to predict the next maintenance date
        v_next_maintenance_start_date := predictedMaintenanceDate(v_car_reg, v_desired_mileage);

        -- Check if the predicted maintenance date is not null
        IF v_next_maintenance_start_date IS NOT NULL THEN
            -- Insert a row in the maintenance table for this car
            INSERT INTO MAINTENANCE 
            VALUES (MAINT_ID_SEQ.NEXTVAL, v_next_maintenance_start_date, v_next_maintenance_start_date + 1, v_next_maintenance_start_date+365, v_car_reg, 'regular-maintenance');

            -- Update rental status for the car to under maintenance
            UPDATE CAR 
            SET RENTAL_STATUS_ID = 3 
            WHERE CAR_REGISTRATION_PLATE_NUMBER = v_car_reg;
            
            UPDATE CAR 
            SET car_current_mileage = 0 
            WHERE CAR_REGISTRATION_PLATE_NUMBER = v_car_reg;

            DBMS_OUTPUT.PUT_LINE('Maintenance scheduled successfully for the car with registration plate number ' || v_car_reg || ' on '||v_next_maintenance_start_date);
        ELSE
            DBMS_OUTPUT.PUT_LINE('Error: Could not predict maintenance date for the car with registration plate number ' || v_car_reg );
        END IF;
      ELSIF v_current_mileage>=v_desired_mileage THEN
            DBMS_OUTPUT.PUT_LINE('The car has already exceeded the desired mileage');
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No data found for the car with registration plate number ' || v_car_reg || '.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
/



--calculate_daily_hire_rate_for_car
--This PL/SQL block is responsible for looping through all avaialbe cars in the system and calculating the car daily hire rate if it’s not yet calculated by invoking calculate_daily_hire_rate_for_car function which takes the car registration plate number as a parameter and returns the hire rate based on specified measures. Additionally, the block emits a message stating whether the rate was previously existent or had been calculated and changed.
SET SERVEROUTPUT ON;
set verify off;
DECLARE
   v_daily_rate NUMBER;
BEGIN
   FOR car_rec IN (SELECT * FROM CAR) LOOP
      -- Calculate penalty only if car_daily_late_return_panelty is null
      IF car_rec.CAR_DAILY_HIRE_RATE IS NULL THEN
         v_daily_rate := calculate_daily_hire_rate_for_car(car_rec.CAR_REGISTRATION_PLATE_NUMBER);
      
         -- Update car_daily_hire_rate
         UPDATE CAR
         SET CAR_DAILY_HIRE_RATE = v_daily_rate
         WHERE CAR_REGISTRATION_PLATE_NUMBER = car_rec.CAR_REGISTRATION_PLATE_NUMBER;
         
         -- print out details
         DBMS_OUTPUT.PUT_LINE('Calculated daily hire rate for Car ' || car_rec.CAR_REGISTRATION_PLATE_NUMBER || ' is ' || v_daily_rate);
        ELSE
         DBMS_OUTPUT.PUT_LINE('Daily Hire Rate for Car ' || car_rec.CAR_REGISTRATION_PLATE_NUMBER || ' is already calculated: ' || car_rec.CAR_DAILY_HIRE_RATE);
      END IF;
   END LOOP;
   COMMIT;
END;
/


--calcCarProfitForCar
-- The anonymous block for the function 'calcCarProfitForCar' that calcuates the profit for a car that is specified by the user. The block will first ask the user to enter the car's registration plate number and store it in a variable. It will then search for the name of that car's manufacturer. Also, it will retrieve the model id and name of that car. The anonymous block will count the number of rentals for this car if there are rentals then it will call the function and pass the car registration number as argument. The block will then display a message with the profit. However, if the car does not have car rentals it will display a message indicating that. In addition, there is a an error message that will appear if the car's registration plate number that is entered by the user is not found in the system.
set VERIFY OFF;
set SERVEROUTPUT on;
DECLARE
v_car_reg NUMBER := &EnterCarRegistrationPlateNumber;
v_car_number NUMBER;
v_car_rentals_num NUMBER;
v_result NUMBER;
   v_car_model_id NUMBER;
   v_car_model VARCHAR2(100);
   v_manufacturer_name VARCHAR2(100);
BEGIN
SELECT MANUFACTURER_NAME INTO v_manufacturer_name FROM MANUFACTURER, MODEL, CAR WHERE CAR.MODEL_ID=MODEL.MODEL_ID AND MODEL.MANUFACTURER_ID=MANUFACTURER.MANUFACTURER_ID AND CAR.CAR_REGISTRATION_PLATE_NUMBER=v_car_reg;

  SELECT MODEL_ID INTO v_car_model_id FROM CAR WHERE CAR_REGISTRATION_PLATE_NUMBER = v_car_reg;
   
        -- Retrieve the model name based on the model ID
        SELECT MODEL_NAME INTO v_car_model FROM MODEL WHERE MODEL_ID = v_car_model_id;
SELECT CAR_REGISTRATION_PLATE_NUMBER INTO v_car_number FROM CAR WHERE CAR_REGISTRATION_PLATE_NUMBER=v_car_reg;
--check if there are car rentals for this car
SELECT COUNT(*) INTO v_car_rentals_num FROM CAR_RENTAL WHERE CAR_REGISTRATION_PLATE_NUMBER=v_car_reg;
IF v_car_rentals_num!=0 THEN
--call the function
v_result:=calcCarProfitForCar(v_car_reg);
DBMS_OUTPUT.PUT_LINE('The profit for '||v_manufacturer_name||' '||v_car_model||'-'||v_car_reg||' is: '||v_result);
ELSE
--if not records found in car rental for this car
DBMS_OUTPUT.PUT_LINE('No car rentals for '||v_manufacturer_name||' '||v_car_model||'-'||v_car_reg||', No profit');
END IF;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RAISE_APPLICATION_ERROR('-20011','No data found for this car');
WHEN OTHERS THEN
RAISE_APPLICATION_ERROR('-20023',' Error: '||SQLERRM);
END;
/

--!ANONYMOUS BLOCKS FOR PROCEDURES
--FindTopSellingModels
-- This PL/SQL block is designed to analyze models rental data for a specific year entered by the user. It will first validate if the entered year is valid & has been reached, if not an error will be raised. After counting the car rentals for that year, the block calls the 'FindTopSellingModels' procedure to determine the best-selling car models. Subsequently, it calculates the average rental duration for these top models and prints the result.If there are no car rentals for the specified year, it provides an message indicating that there are no rentals for that year. The block also incorporates exception handling to address scenarios such as missing data or unexpected errors during execution.
SET SERVEROUTPUT ON;
SET VERIFY OFF;

DECLARE
    v_year NUMBER;
    v_continue VARCHAR2(20);
BEGIN
        -- Prompt the user to enter the year
        v_year := &EnterYear;
        -- Validate the entered year
        IF v_year <= EXTRACT(YEAR FROM SYSDATE) THEN 
            -- Display a header for the analysis
            DBMS_OUTPUT.PUT_LINE('Analyzing top selling models for ' || v_year||' group by location');
            -- Call the FindTopSellingModels procedure to get the top selling models for the entered year
            FindTopSellingModels(v_year);
       
        ELSE
            -- Raise an error if the entered year is in the future
            RAISE_APPLICATION_ERROR(-20054, 'Entered year is invalid or in the future.');
        END IF;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No data found');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
/


--FindTopCustomers
-- This PL/SQL block takes the category of the car as input from the user and checks if it exists in the system. If the category exists, it calls the 'FindTopCustomers' procedure to display the top customers who rented cars from that category. If the category does not exist, it raises an error and displays a message listing all valid categories available.
SET SERVEROUTPUT ON;
set verify off;
DECLARE
    v_car_category VARCHAR2(100) := '&EnterCarCategory';
    v_category_exists NUMBER := 0;
    v_valid_categories VARCHAR2(400) := '';
    CURSOR categories_cursor IS SELECT CATEGORY_ID FROM CAR_CATEGORY;
    v_category_rec categories_cursor%ROWTYPE;
    v_category_upper VARCHAR2(100);
BEGIN
   v_category_upper:=upper(v_car_category);
    -- Concatenate the valid categories
    FOR v_category_rec IN categories_cursor LOOP
        v_valid_categories := v_valid_categories || v_category_rec.CATEGORY_ID || ', ';
    END LOOP;

    -- Check if the entered category exists in the valid categories
    FOR category_rec IN categories_cursor LOOP
        IF UPPER(v_car_category) = UPPER(category_rec.CATEGORY_ID) THEN
            v_category_exists := 1;
            EXIT; -- Exit the loop if category is found
        END IF;
    END LOOP;

    -- If the category doesn't exist, raise an error
    IF v_category_exists = 0 THEN
        RAISE_APPLICATION_ERROR('-20076', 'Invalid Car Category: ' || v_car_category || '. Valid Categories: ' || RTRIM(v_valid_categories, ', '));
   ELSE
   FindTopCustomers(v_category_upper);
    END IF;
END;
/


--get_top_3_selling_extras_per_location
-- This PL/SQL block will analyze extra eqyupment selling data based on a specified location entered by the user. It will first validate the existence of the location, it will call the get_top_3_selling_extras_per_location procedure if the location is valid. If the location doesn't exist in the list of valid locations, it raises an error indicating the invalid location name and provides a list of valid locations. The block includes exception handling to manage situations where no data is found for the location or if any other errors occur during execution.
SET SERVEROUTPUT ON;
DECLARE
v_location_name varchar2(100):='&EnterLocationName';
 v_location_exists NUMBER := 0;
    v_valid_location VARCHAR2(400) := ''; 
    CURSOR locations_cursor IS SELECT LOCATION_CITY FROM LOCATION;
    v_location_rec locations_cursor%ROWTYPE;
    v_location_upper VARCHAR2(100);
BEGIN
 v_location_upper:=INITCAP(v_location_name);
    -- Concatenate the valid locations
    FOR v_location_rec IN locations_cursor LOOP
        v_valid_location := v_valid_location || v_location_rec.LOCATION_CITY || ', ';
    END LOOP;

    -- Check if the entered category exists in the valid categories
    FOR location_rec IN (SELECT LOCATION_CITY FROM LOCATION) LOOP
        IF v_location_upper = INITCAP(location_rec.LOCATION_CITY) THEN
            v_location_exists := 1;
            EXIT; -- Exit the loop if location is found
        END IF;
    END LOOP;

    -- If the location doesn't exist, raise an error
    IF v_location_exists = 0 THEN
        RAISE_APPLICATION_ERROR('-20096', 'Invalid Location Name: ' || v_location_name || '. Valid Locations: ' || RTRIM(v_valid_location, ', '));
  ELSE
        BEGIN
            get_top_3_selling_extras_per_location(v_location_upper);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No data found for the location: ' || v_location_name);
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
        END;
    END IF;
END;
/



--CalculateRentalMetrics
--The PL/SQL block prompts the user to enter the start and end year and calls CalculateRentalMetrics function	using the provided years as parameters in the function call if the start and end years are valid. If not, it prints an error message indicating the error encountered.
SET SERVEROUTPUT ON;
SET VERIFY OFF;
DECLARE
    v_start_year NUMBER := &EnterStartYear;
    v_end_year NUMBER := &EnterEndYear;
    v_current_year NUMBER;
    e_invalid_start_year EXCEPTION;
    e_invalid_end_year EXCEPTION;
BEGIN
    -- Get the current year
    SELECT TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY'))
    INTO v_current_year
    FROM DUAL;

    -- Check if the passed year range is valid
    IF v_start_year > v_end_year THEN
        RAISE e_invalid_start_year;
    ELSIF v_end_year > v_current_year THEN
        RAISE e_invalid_end_year;
    ELSE
        -- Call the CalculateRentalMetrics procedure with the valid year range
        CalculateRentalMetrics(v_start_year, v_end_year);
    END IF;
EXCEPTION
    WHEN e_invalid_start_year THEN
        RAISE_APPLICATION_ERROR(-20001, 'Error: Start year cannot be greater than end year');
    WHEN e_invalid_end_year THEN
        RAISE_APPLICATION_ERROR(-20002, 'Error: End year cannot be greater than the current year');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
/


--! PL/SQL block for Package
set serveroutput on;
DECLARE
v_penalty NUMBER;
v_maintenance DATE;
v_profit NUMBER;
v_hire_rate NUMBER;
BEGIN
DBMS_OUTPUT.PUT_LINE('PROCEDURE 1: FindTopSellingModels');
RentalManagementPackage.FindTopSellingModels(2022);
DBMS_OUTPUT.PUT_LINE('----------------------------------------');
DBMS_OUTPUT.PUT_LINE('PROCEDURE 2: FindTopCustomers');
RentalManagementPackage.FindTopCustomers('LUX');
DBMS_OUTPUT.PUT_LINE('----------------------------------------');
DBMS_OUTPUT.PUT_LINE('PROCEDURE 3: get_top_3_selling_extras_per_location');
RentalManagementPackage.get_top_3_selling_extras_per_location('Manama');
DBMS_OUTPUT.PUT_LINE('----------------------------------------');
DBMS_OUTPUT.PUT_LINE('PROCEDURE 4: CalculateRentalMetrics');
RentalManagementPackage.CalculateRentalMetrics(2021,2022);
DBMS_OUTPUT.PUT_LINE('----------------------------------------');
DBMS_OUTPUT.PUT_LINE('FUNCTION 1: calculate_daily_late_return_penalty_for_car');
v_penalty:=RentalManagementPackage.calculate_daily_late_return_penalty_for_car(79557);
DBMS_OUTPUT.PUT_LINE('Penalty is: '||v_penalty);
DBMS_OUTPUT.PUT_LINE('----------------------------------------');
DBMS_OUTPUT.PUT_LINE('FUNCTION 2: predictedMaintenanceDate');
v_maintenance:=RentalManagementPackage.predictedMaintenanceDate(79557,30000);
DBMS_OUTPUT.PUT_LINE('Maintenance date is: '||TO_CHAR(v_maintenance));
DBMS_OUTPUT.PUT_LINE('----------------------------------------');
DBMS_OUTPUT.PUT_LINE('FUNCTION 3: calcCarProfitForCar');
v_profit:=RentalManagementPackage.calcCarProfitForCar(87953);
DBMS_OUTPUT.PUT_LINE('Profit is: '||v_profit);
DBMS_OUTPUT.PUT_LINE('----------------------------------------');
DBMS_OUTPUT.PUT_LINE('FUNCTION 4: calculate_daily_hire_rate_for_car');
v_hire_rate:=RentalManagementPackage.calculate_daily_hire_rate_for_car(79557);
DBMS_OUTPUT.PUT_LINE('Hire Rate is: '||v_hire_rate);
DBMS_OUTPUT.PUT_LINE('----------------------------------------');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
/


--!DCL Script for creating users and granting and revoking system and object privileges
--Creating a general-purpose account for retrieving, inserting, deleting and updating data. (Admin Account)
CREATE USER ADMIN1 IDENTIFIED BY ADMIN1;

--create role that will be granted to general-purpose user accounts ( this role will be granted to admins)
CREATE ROLE ADMINROLE;

--granting system privileges to the general-purpose users 
GRANT CREATE SESSION, CREATE USER, ALTER USER, DROP USER, CREATE TABLE, CREATE ANY INDEX, CREATE SYNONYM, CREATE PUBLIC SYNONYM, CREATE SEQUENCE, CREATE VIEW, CREATE TRIGGER, CREATE ROLE, CREATE TYPE, CREATE PROCEDURE TO ADMINROLE WITH ADMIN OPTION;

--grant object privileges to the general-purpose users
DECLARE
  sql_statement VARCHAR2(900);
BEGIN
  FOR table_rec IN (SELECT table_name FROM user_tables)
  LOOP
    sql_statement := 'GRANT SELECT, INSERT, DELETE, UPDATE ON ' || table_rec.table_name || ' TO ADMINROLE';
    DBMS_OUTPUT.PUT_LINE(sql_statement); 
    BEGIN
      EXECUTE IMMEDIATE sql_statement;
    EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error executing statement for table ' || table_rec.table_name || ': ' || SQLERRM);
    END;
  END LOOP;
END;
/

--grant this role to ADMIN1 user
GRANT ADMINROLE TO ADMIN1;
GRANT UNLIMITED TABLESPACE TO ADMIN1 WITH ADMIN OPTION;

--to revoke the privileges from ADMIN1
REVOKE ADMINROLE FROM ADMIN1;
REVOKE UNLIMITED TABLESPACE FROM ADMIN1;


--A read-only account that will allow a manager of the company to retrieve records from Customer, Car Rental, Extra Rental and Rental Status tables.
--create a manager user account
CREATE USER MNGRUSER IDENTIFIED BY MNGRUSER;

--create role for managers
CREATE ROLE MNGRROLE;


--granting system privileges
GRANT CREATE SESSION TO MNGRROLE;


--granting object privileges
DECLARE
  sql_statement VARCHAR2(900);
BEGIN
  FOR table_rec IN (SELECT TABLE_NAME FROM USER_TABLES WHERE TABLE_NAME IN ('CUSTOMER', 'CAR_RENTAL', 'EXTRA_RENTAL', 'RENTAL_STATUS'))
  LOOP
    sql_statement := 'GRANT SELECT ON ' || table_rec.TABLE_NAME || ' TO MNGRROLE';
    DBMS_OUTPUT.PUT_LINE(sql_statement);
    BEGIN
      EXECUTE IMMEDIATE sql_statement;
    EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error executing statement for table ' || table_rec.TABLE_NAME || ': ' || SQLERRM);
    END;
  END LOOP;
END;
/

--grant the role to MNGRUSER
GRANT MNGRROLE TO MNGRUSER;

--to revoke the privileges from MNGRUSER
REVOKE MNGRROLE FROM MNGRUSER;